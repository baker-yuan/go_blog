// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/baker-yuan/go-blog/application/blog/api/blog/v1"
	"github.com/baker-yuan/go-blog/application/blog/internal/biz"
	"github.com/baker-yuan/go-blog/application/blog/internal/data"
	"github.com/baker-yuan/go-blog/application/blog/internal/service"
	"trpc.group/trpc-go/trpc-go/server"
)

import (
	_ "trpc.group/trpc-go/trpc-database/gorm"
	_ "trpc.group/trpc-go/trpc-filter/debuglog"
	_ "trpc.group/trpc-go/trpc-filter/recovery"
	_ "trpc.group/trpc-go/trpc-filter/validation"
	_ "trpc.group/trpc-go/trpc-naming-polarismesh"
)

// Injectors from wire.go:

// wireApp 初始化应用
func wireApp(trpcServer *server.Server) (*App, error) {
	dataData, err := data.NewData()
	if err != nil {
		return nil, err
	}
	articleRepo := data.NewArticleRepo(dataData)
	articleUsecase := biz.NewArticleUsecase(articleRepo)
	blogService := service.NewBlogService(articleUsecase)
	app := newApp(trpcServer, blogService)
	return app, nil
}

// wire.go:

type App struct {
	trpcServer *server.Server
	greeter    *service.BlogService
}

func newApp(trpcServer *server.Server, greeter *service.BlogService) *App {
	return &App{
		trpcServer: trpcServer,
		greeter:    greeter,
	}
}

func (app *App) Run() error {
	api.RegisterBlogApiService(app.trpcServer, app.greeter)
	return app.trpcServer.Serve()
}
