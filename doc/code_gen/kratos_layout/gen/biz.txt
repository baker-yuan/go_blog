##导入宏定义
$!{define.vm}

##保存文件（宏定义）
#save("/codegen", "biz.txt")


package biz

import (
	"context"
	"time"

	"github.com/baker-yuan/go-blog/common/util"
)

// $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}) $!{tableInfo.comment}
type $!{tableInfo.name} struct {

}

type $!{tableInfo.name}s []*$!{tableInfo.name}

// $!{tableInfo.name}Repo $!{tableInfo.comment}repo
type $!{tableInfo.name}Repo interface {
    // Get$!{tableInfo.name}ByID 根据$!{tableInfo.comment}id集合查询$!{tableInfo.comment}
    Get$!{tableInfo.name}ByID(ctx context.Context, id uint32) (*$!{tableInfo.name}, error)
    // Get$!{tableInfo.name}ByIDs 根据$!{tableInfo.comment}id集合查询$!{tableInfo.comment}
    Get$!{tableInfo.name}ByIDs(ctx context.Context, ids []uint32) ($!{tableInfo.name}s, error)
    // Save 保存$!{tableInfo.comment}
    Save(ctx context.Context, $!tool.firstLowerCase($!{tableInfo.name}) *$!{tableInfo.name}) (uint32, error)
    // UpdateByID 根据ID修改$!{tableInfo.comment}
    UpdateByID(ctx context.Context, $!tool.firstLowerCase($!{tableInfo.name}) *$!{tableInfo.name}) error
    // DeleteByID 根据ID删除$!{tableInfo.comment}
    DeleteByID(ctx context.Context, id uint32) error
    // Search$!{tableInfo.name} $!{tableInfo.comment}搜索
    Search$!{tableInfo.name}(ctx context.Context, req *pb.Search$!{tableInfo.name}Req) ($!{tableInfo.name}s, uint32, error)
}


// $!{tableInfo.name}UseCase $!{tableInfo.comment}管理
type $!{tableInfo.name}UseCase struct {
   *CommonUseCase
   repo $!{tableInfo.name}Repo
}

// New$!{tableInfo.name}UseCase 创建$!{tableInfo.comment}管理业务逻辑实现
func New$!{tableInfo.name}UseCase(
	commonUseCase *CommonUseCase,
	repo $!{tableInfo.name}Repo,
) *$!{tableInfo.name}UseCase {
	return &$!{tableInfo.name}UseCase{
		CommonUseCase: commonUseCase,
		repo:          repo,
	}
}

// $!{tableInfo.name}Detail $!{tableInfo.comment}详情
func (c *$!{tableInfo.name}UseCase) $!{tableInfo.name}Detail(ctx context.Context, req *pb.$!{tableInfo.name}DetailReq) (*pb.$!{tableInfo.name}, error) {
	$!tool.firstLowerCase($!{tableInfo.name}), err := c.repo.Get$!{tableInfo.name}ByID(ctx, req.GetId())
	if err != nil {
		return nil, err
	}
	pb$!{tableInfo.name} := $!{tableInfo.name}EntityToModel($!tool.firstLowerCase($!{tableInfo.name}))
	return pb$!{tableInfo.name}, nil
}

// Search$!{tableInfo.name} $!{tableInfo.comment}搜索
func (c *$!{tableInfo.name}UseCase) Search$!{tableInfo.name}(ctx context.Context, req *pb.Search$!{tableInfo.name}Req) ([]*pb.$!{tableInfo.name}, uint32, error) {
	$!tool.firstLowerCase($!{tableInfo.name})s, total, err := c.repo.Search$!{tableInfo.name}(ctx, req)
	if err != nil {
		return nil, 0, err
	}
	data := make([]*pb.$!{tableInfo.name}, 0)
	for _, $!tool.firstLowerCase($!{tableInfo.name}) := range $!tool.firstLowerCase($!{tableInfo.name})s {
		data = append(data, $!{tableInfo.name}EntityToModel($!tool.firstLowerCase($!{tableInfo.name})))
	}
	return data, total, nil
}


// AddOrUpdate$!{tableInfo.name} 添加修改$!{tableInfo.comment}
func (c *$!{tableInfo.name}UseCase) AddOrUpdate$!{tableInfo.name}(ctx context.Context, req *pb.AddOrUpdate$!{tableInfo.name}Req) (uint32, error) {
	userID, err := util.SessionUtils.GetLoginUserID(ctx)
	if err != nil {
		return 0, err
	}
	if req.GetId() == 0 {
		return c.add$!{tableInfo.name}(ctx, userID, req)
	} else {
		db$!{tableInfo.name}, err := c.repo.Get$!{tableInfo.name}ByID(ctx, req.GetId())
    	if err != nil {
    		return 0, err
    	}
		return c.update$!{tableInfo.name}(ctx, db$!{tableInfo.name}, userID, req)
	}
}

func (c *$!{tableInfo.name}UseCase) add$!{tableInfo.name}(ctx context.Context, userID uint32, req *pb.AddOrUpdate$!{tableInfo.name}Req) (uint32, error) {
	$!tool.firstLowerCase($!{tableInfo.name}) := AddOrUpdate$!{tableInfo.name}ReqToEntity(req)
	$!tool.firstLowerCase($!{tableInfo.name}) .CreateUser = userID
	$!tool.firstLowerCase($!{tableInfo.name}) .CreateTime = uint32(time.Now().Unix())
	$!tool.firstLowerCase($!{tableInfo.name}) .UpdateUser = userID
	$!tool.firstLowerCase($!{tableInfo.name}) .UpdateTime = uint32(time.Now().Unix())

	lastInsertID, err := c.repo.Save(ctx, $!tool.firstLowerCase($!{tableInfo.name}))
	if err != nil {
		return 0, err
	}

	c.SaveChangeLog(ctx,
		lastInsertID, pb.ResourceType_RT_,
		"{}", $!tool.firstLowerCase($!{tableInfo.name}),
		"新增$!{tableInfo.comment}",
	)

	return lastInsertID, nil
}

func (c *$!{tableInfo.name}UseCase) update$!{tableInfo.name}(ctx context.Context, db$!{tableInfo.name} *$!{tableInfo.name}, userID uint32, req *pb.AddOrUpdate$!{tableInfo.name}Req) (uint32, error) {
	save$!{tableInfo.name} := AddOrUpdate$!{tableInfo.name}ReqToEntity(req)
    save$!{tableInfo.name}.CreateUser = db$!{tableInfo.name}.CreateUser
    save$!{tableInfo.name}.CreateTime = db$!{tableInfo.name}.CreateTime
    save$!{tableInfo.name}.UpdateUser = userID
    save$!{tableInfo.name}.UpdateTime = uint32(time.Now().Unix())

	if err := c.repo.UpdateByID(ctx, save$!{tableInfo.name}); err != nil {
		return 0, err
	}

	c.SaveChangeLog(ctx,
		req.GetId(), pb.ResourceType_RT_,
		db$!{tableInfo.name}, save$!{tableInfo.name},
		"全字段修改$!{tableInfo.comment}",
	)

	return req.GetId(), nil
}

// Delete$!{tableInfo.name} 删除$!{tableInfo.comment}
func (c *$!{tableInfo.name}UseCase) Delete$!{tableInfo.name}(ctx context.Context, req *pb.Delete$!{tableInfo.name}Req) error {
	$!tool.firstLowerCase($!{tableInfo.name}), err := c.repo.Get$!{tableInfo.name}ByID(ctx, req.GetId())
	if err != nil {
		return err
	}

	if err := c.repo.DeleteByID(ctx, req.GetId()); err != nil {
		return err
	}

	c.SaveChangeLog(ctx,
		req.GetId(), pb.ResourceType_RT_,
		$!tool.firstLowerCase($!{tableInfo.name}), "{}",
		"删除$!{tableInfo.comment}",
	)

	return nil
}
