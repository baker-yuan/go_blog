##导入宏定义
$!{define.vm}

##保存文件（宏定义）
#save("/gencode", "usecase.go")




package usecase

import (
	"context"

	"github.com/baker-yuan/go-mall/common/entity"
	"github.com/baker-yuan/go-mall/application/admin/internal/usecase/assembler"
	"github.com/baker-yuan/go-mall/common/db"
	pb "github.com/baker-yuan/go-mall/proto/mall"
)

// $!{tableInfo.name}UseCase $!{tableInfo.comment}管理Service实现类
type $!{tableInfo.name}UseCase struct {
	$!tool.firstLowerCase($!{tableInfo.name})Repo                  I$!{tableInfo.name}Repo    // 操作$!{tableInfo.comment}
}

// New$!{tableInfo.name} 创建$!{tableInfo.comment}管理Service实现类
func New$!{tableInfo.name}($!tool.firstLowerCase($!{tableInfo.name})Repo I$!{tableInfo.name}Repo) *$!{tableInfo.name}UseCase {
	return &$!{tableInfo.name}UseCase{
		$!tool.firstLowerCase($!{tableInfo.name})Repo:                  $!tool.firstLowerCase($!{tableInfo.name})Repo,
	}
}

// Create$!{tableInfo.name} 添加$!{tableInfo.comment}
func (c $!{tableInfo.name}UseCase) Create$!{tableInfo.name}(ctx context.Context, param *pb.AddOrUpdate$!{tableInfo.name}Param) error {
	// 数据转换
	$!tool.firstLowerCase($!{tableInfo.name}) := assembler.AddOrUpdate$!{tableInfo.name}ParamToEntity(param)

    // 保存
    if err := c.$!tool.firstLowerCase($!{tableInfo.name})Repo .Create(ctx, $!tool.firstLowerCase($!{tableInfo.name})); err != nil {
        return err
    }

    return nil
}


// Update$!{tableInfo.name} 修改$!{tableInfo.comment}
func (c $!{tableInfo.name}UseCase) Update$!{tableInfo.name}(ctx context.Context, param *pb.AddOrUpdate$!{tableInfo.name}Param) error {
	var (
		old$!{tableInfo.name} *entity.$!{tableInfo.name}
		new$!{tableInfo.name} *entity.$!{tableInfo.name}
		err         error
	)

    // 老数据
	if old$!{tableInfo.name}, err = c.$!tool.firstLowerCase($!{tableInfo.name})Repo .GetByID(ctx, param.GetId()); err != nil {
		return err
	}

	// 新数据
	new$!{tableInfo.name} = assembler.AddOrUpdate$!{tableInfo.name}ParamToEntity(param)
	new$!{tableInfo.name} .ID = param.Id
	new$!{tableInfo.name} .CreatedAt = old$!{tableInfo.name}.CreatedAt

	// 更新$!{tableInfo.comment}
	return c.$!tool.firstLowerCase($!{tableInfo.name})Repo .Update(ctx, new$!{tableInfo.name})
}

// Get$!{tableInfo.name}s 分页查询$!{tableInfo.comment}
func (c $!{tableInfo.name}UseCase) Get$!{tableInfo.name}s(ctx context.Context, param *pb.Get$!{tableInfo.name}sParam) ([]*pb.$!{tableInfo.name}, uint32, error) {
	opts := make([]db.DBOption, 0)
	// todo 条件

	$!tool.firstLowerCase($!{tableInfo.name})s, pageTotal, err := c.$!tool.firstLowerCase($!{tableInfo.name})Repo .GetByDBOption(ctx, param.GetPageNum(), param.GetPageSize(), opts...)
	if err != nil {
		return nil, 0, err
	}

	results := make([]*pb.$!{tableInfo.name}, 0)
	for _, $!tool.firstLowerCase($!{tableInfo.name}) := range $!tool.firstLowerCase($!{tableInfo.name})s {
		results = append(results, assembler.$!{tableInfo.name}EntityToModel($!tool.firstLowerCase($!{tableInfo.name})))
	}
	return results, pageTotal, nil
}

// Get$!{tableInfo.name} 根据id获取$!{tableInfo.comment}
func (c $!{tableInfo.name}UseCase) Get$!{tableInfo.name}(ctx context.Context, id uint64) (*pb.$!{tableInfo.name}, error) {
	$!tool.firstLowerCase($!{tableInfo.name}), err := c.$!tool.firstLowerCase($!{tableInfo.name})Repo .GetByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return assembler.$!{tableInfo.name}EntityToModel($!tool.firstLowerCase($!{tableInfo.name})), nil
}

// Delete$!{tableInfo.name} 删除$!{tableInfo.comment}
func (c $!{tableInfo.name}UseCase) Delete$!{tableInfo.name}(ctx context.Context, id uint64) error {
	return c.$!tool.firstLowerCase($!{tableInfo.name})Repo .DeleteByID(ctx, id)
}


