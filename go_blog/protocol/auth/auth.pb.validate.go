// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/auth.proto

package auth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmptyRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyRspMultiError, or nil
// if none found.
func (m *EmptyRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyRspMultiError(errors)
	}

	return nil
}

// EmptyRspMultiError is an error wrapping multiple validation errors returned
// by EmptyRsp.ValidateAll() if the designated constraints aren't met.
type EmptyRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyRspMultiError) AllErrors() []error { return m }

// EmptyRspValidationError is the validation error returned by
// EmptyRsp.Validate if the designated constraints aren't met.
type EmptyRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRspValidationError) ErrorName() string { return "EmptyRspValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRspValidationError{}

// Validate checks the field values on AddOrUpdateRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddOrUpdateRspMultiError,
// or nil if none found.
func (m *AddOrUpdateRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddOrUpdateRspMultiError(errors)
	}

	return nil
}

// AddOrUpdateRspMultiError is an error wrapping multiple validation errors
// returned by AddOrUpdateRsp.ValidateAll() if the designated constraints
// aren't met.
type AddOrUpdateRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateRspMultiError) AllErrors() []error { return m }

// AddOrUpdateRspValidationError is the validation error returned by
// AddOrUpdateRsp.Validate if the designated constraints aren't met.
type AddOrUpdateRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateRspValidationError) ErrorName() string { return "AddOrUpdateRspValidationError" }

// Error satisfies the builtin error interface
func (e AddOrUpdateRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateRspValidationError{}

// Validate checks the field values on Menu with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Menu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Menu with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MenuMultiError, or nil if none found.
func (m *Menu) ValidateAll() error {
	return m.validate(true)
}

func (m *Menu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Icon

	// no validation rules for Describe

	// no validation rules for SortValue

	// no validation rules for Path

	// no validation rules for Component

	// no validation rules for IsHidden

	// no validation rules for CreateUser

	// no validation rules for UpdateUser

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return MenuMultiError(errors)
	}

	return nil
}

// MenuMultiError is an error wrapping multiple validation errors returned by
// Menu.ValidateAll() if the designated constraints aren't met.
type MenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuMultiError) AllErrors() []error { return m }

// MenuValidationError is the validation error returned by Menu.Validate if the
// designated constraints aren't met.
type MenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuValidationError) ErrorName() string { return "MenuValidationError" }

// Error satisfies the builtin error interface
func (e MenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuValidationError{}

// Validate checks the field values on SearchMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchMenuReqMultiError, or
// nil if none found.
func (m *SearchMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	if m.GetPageNum() <= 0 {
		err := SearchMenuReqValidationError{
			field:  "PageNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := SearchMenuReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchMenuReqMultiError(errors)
	}

	return nil
}

// SearchMenuReqMultiError is an error wrapping multiple validation errors
// returned by SearchMenuReq.ValidateAll() if the designated constraints
// aren't met.
type SearchMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMenuReqMultiError) AllErrors() []error { return m }

// SearchMenuReqValidationError is the validation error returned by
// SearchMenuReq.Validate if the designated constraints aren't met.
type SearchMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMenuReqValidationError) ErrorName() string { return "SearchMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMenuReqValidationError{}

// Validate checks the field values on SearchMenuRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchMenuRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchMenuRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchMenuRspMultiError, or
// nil if none found.
func (m *SearchMenuRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchMenuRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchMenuRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchMenuRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchMenuRspValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchMenuRspMultiError(errors)
	}

	return nil
}

// SearchMenuRspMultiError is an error wrapping multiple validation errors
// returned by SearchMenuRsp.ValidateAll() if the designated constraints
// aren't met.
type SearchMenuRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMenuRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMenuRspMultiError) AllErrors() []error { return m }

// SearchMenuRspValidationError is the validation error returned by
// SearchMenuRsp.Validate if the designated constraints aren't met.
type SearchMenuRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMenuRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMenuRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMenuRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMenuRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMenuRspValidationError) ErrorName() string { return "SearchMenuRspValidationError" }

// Error satisfies the builtin error interface
func (e SearchMenuRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMenuRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMenuRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMenuRspValidationError{}

// Validate checks the field values on MenuDetailReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuDetailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuDetailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuDetailReqMultiError, or
// nil if none found.
func (m *MenuDetailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuDetailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := MenuDetailReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MenuDetailReqMultiError(errors)
	}

	return nil
}

// MenuDetailReqMultiError is an error wrapping multiple validation errors
// returned by MenuDetailReq.ValidateAll() if the designated constraints
// aren't met.
type MenuDetailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuDetailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuDetailReqMultiError) AllErrors() []error { return m }

// MenuDetailReqValidationError is the validation error returned by
// MenuDetailReq.Validate if the designated constraints aren't met.
type MenuDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuDetailReqValidationError) ErrorName() string { return "MenuDetailReqValidationError" }

// Error satisfies the builtin error interface
func (e MenuDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuDetailReqValidationError{}

// Validate checks the field values on AddOrUpdateMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrUpdateMenuReqMultiError, or nil if none found.
func (m *AddOrUpdateMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetParentId() <= 0 {
		err := AddOrUpdateMenuReqValidationError{
			field:  "ParentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddOrUpdateMenuReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIcon()) < 1 {
		err := AddOrUpdateMenuReqValidationError{
			field:  "Icon",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescribe()) < 1 {
		err := AddOrUpdateMenuReqValidationError{
			field:  "Describe",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSortValue() <= 0 {
		err := AddOrUpdateMenuReqValidationError{
			field:  "SortValue",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPath()) < 1 {
		err := AddOrUpdateMenuReqValidationError{
			field:  "Path",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetComponent()) < 1 {
		err := AddOrUpdateMenuReqValidationError{
			field:  "Component",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsHidden

	if len(errors) > 0 {
		return AddOrUpdateMenuReqMultiError(errors)
	}

	return nil
}

// AddOrUpdateMenuReqMultiError is an error wrapping multiple validation errors
// returned by AddOrUpdateMenuReq.ValidateAll() if the designated constraints
// aren't met.
type AddOrUpdateMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateMenuReqMultiError) AllErrors() []error { return m }

// AddOrUpdateMenuReqValidationError is the validation error returned by
// AddOrUpdateMenuReq.Validate if the designated constraints aren't met.
type AddOrUpdateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateMenuReqValidationError) ErrorName() string {
	return "AddOrUpdateMenuReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateMenuReqValidationError{}

// Validate checks the field values on DeleteMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteMenuReqMultiError, or
// nil if none found.
func (m *DeleteMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteMenuReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteMenuReqMultiError(errors)
	}

	return nil
}

// DeleteMenuReqMultiError is an error wrapping multiple validation errors
// returned by DeleteMenuReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuReqMultiError) AllErrors() []error { return m }

// DeleteMenuReqValidationError is the validation error returned by
// DeleteMenuReq.Validate if the designated constraints aren't met.
type DeleteMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuReqValidationError) ErrorName() string { return "DeleteMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuReqValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Describe

	// no validation rules for ResourceType

	// no validation rules for Status

	// no validation rules for Url

	// no validation rules for HttpMethod

	// no validation rules for IsNeedLogin

	// no validation rules for IsNeedPermission

	// no validation rules for Service

	// no validation rules for Method

	// no validation rules for CreateUser

	// no validation rules for UpdateUser

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on SearchResourceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchResourceReqMultiError, or nil if none found.
func (m *SearchResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	if m.GetPageNum() <= 0 {
		err := SearchResourceReqValidationError{
			field:  "PageNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := SearchResourceReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchResourceReqMultiError(errors)
	}

	return nil
}

// SearchResourceReqMultiError is an error wrapping multiple validation errors
// returned by SearchResourceReq.ValidateAll() if the designated constraints
// aren't met.
type SearchResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResourceReqMultiError) AllErrors() []error { return m }

// SearchResourceReqValidationError is the validation error returned by
// SearchResourceReq.Validate if the designated constraints aren't met.
type SearchResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResourceReqValidationError) ErrorName() string {
	return "SearchResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResourceReqValidationError{}

// Validate checks the field values on SearchResourceRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchResourceRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResourceRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchResourceRspMultiError, or nil if none found.
func (m *SearchResourceRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResourceRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResourceRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResourceRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResourceRspValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchResourceRspMultiError(errors)
	}

	return nil
}

// SearchResourceRspMultiError is an error wrapping multiple validation errors
// returned by SearchResourceRsp.ValidateAll() if the designated constraints
// aren't met.
type SearchResourceRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResourceRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResourceRspMultiError) AllErrors() []error { return m }

// SearchResourceRspValidationError is the validation error returned by
// SearchResourceRsp.Validate if the designated constraints aren't met.
type SearchResourceRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResourceRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResourceRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResourceRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResourceRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResourceRspValidationError) ErrorName() string {
	return "SearchResourceRspValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResourceRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResourceRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResourceRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResourceRspValidationError{}

// Validate checks the field values on ResourceDetailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourceDetailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDetailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDetailReqMultiError, or nil if none found.
func (m *ResourceDetailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDetailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ResourceDetailReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResourceDetailReqMultiError(errors)
	}

	return nil
}

// ResourceDetailReqMultiError is an error wrapping multiple validation errors
// returned by ResourceDetailReq.ValidateAll() if the designated constraints
// aren't met.
type ResourceDetailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDetailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDetailReqMultiError) AllErrors() []error { return m }

// ResourceDetailReqValidationError is the validation error returned by
// ResourceDetailReq.Validate if the designated constraints aren't met.
type ResourceDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDetailReqValidationError) ErrorName() string {
	return "ResourceDetailReqValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDetailReqValidationError{}

// Validate checks the field values on AddOrUpdateResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrUpdateResourceReqMultiError, or nil if none found.
func (m *AddOrUpdateResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetParentId() <= 0 {
		err := AddOrUpdateResourceReqValidationError{
			field:  "ParentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddOrUpdateResourceReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescribe()) < 1 {
		err := AddOrUpdateResourceReqValidationError{
			field:  "Describe",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateResourceReq_ResourceType_InLookup[m.GetResourceType()]; !ok {
		err := AddOrUpdateResourceReqValidationError{
			field:  "ResourceType",
			reason: "value must be in list [DIRECTORY INTERFACE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateResourceReq_Status_InLookup[m.GetStatus()]; !ok {
		err := AddOrUpdateResourceReqValidationError{
			field:  "Status",
			reason: "value must be in list [UNPUBLISHED PUBLISHED OFFLINE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := AddOrUpdateResourceReqValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHttpMethod()) < 1 {
		err := AddOrUpdateResourceReqValidationError{
			field:  "HttpMethod",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsNeedLogin

	// no validation rules for IsNeedPermission

	if utf8.RuneCountInString(m.GetService()) < 1 {
		err := AddOrUpdateResourceReqValidationError{
			field:  "Service",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMethod()) < 1 {
		err := AddOrUpdateResourceReqValidationError{
			field:  "Method",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddOrUpdateResourceReqMultiError(errors)
	}

	return nil
}

// AddOrUpdateResourceReqMultiError is an error wrapping multiple validation
// errors returned by AddOrUpdateResourceReq.ValidateAll() if the designated
// constraints aren't met.
type AddOrUpdateResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateResourceReqMultiError) AllErrors() []error { return m }

// AddOrUpdateResourceReqValidationError is the validation error returned by
// AddOrUpdateResourceReq.Validate if the designated constraints aren't met.
type AddOrUpdateResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateResourceReqValidationError) ErrorName() string {
	return "AddOrUpdateResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateResourceReqValidationError{}

var _AddOrUpdateResourceReq_ResourceType_InLookup = map[ResourceResourceType]struct{}{
	1: {},
	2: {},
}

var _AddOrUpdateResourceReq_Status_InLookup = map[ResourceStatus]struct{}{
	0: {},
	1: {},
	2: {},
}

// Validate checks the field values on DeleteResourceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteResourceReqMultiError, or nil if none found.
func (m *DeleteResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteResourceReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteResourceReqMultiError(errors)
	}

	return nil
}

// DeleteResourceReqMultiError is an error wrapping multiple validation errors
// returned by DeleteResourceReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceReqMultiError) AllErrors() []error { return m }

// DeleteResourceReqValidationError is the validation error returned by
// DeleteResourceReq.Validate if the designated constraints aren't met.
type DeleteResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceReqValidationError) ErrorName() string {
	return "DeleteResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceReqValidationError{}

// Validate checks the field values on GetEffectiveResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEffectiveResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEffectiveResourceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEffectiveResourceReqMultiError, or nil if none found.
func (m *GetEffectiveResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEffectiveResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetEffectiveResourceReqMultiError(errors)
	}

	return nil
}

// GetEffectiveResourceReqMultiError is an error wrapping multiple validation
// errors returned by GetEffectiveResourceReq.ValidateAll() if the designated
// constraints aren't met.
type GetEffectiveResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEffectiveResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEffectiveResourceReqMultiError) AllErrors() []error { return m }

// GetEffectiveResourceReqValidationError is the validation error returned by
// GetEffectiveResourceReq.Validate if the designated constraints aren't met.
type GetEffectiveResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEffectiveResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEffectiveResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEffectiveResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEffectiveResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEffectiveResourceReqValidationError) ErrorName() string {
	return "GetEffectiveResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetEffectiveResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEffectiveResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEffectiveResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEffectiveResourceReqValidationError{}

// Validate checks the field values on GetEffectiveResourceRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEffectiveResourceRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEffectiveResourceRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEffectiveResourceRspMultiError, or nil if none found.
func (m *GetEffectiveResourceRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEffectiveResourceRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEffectiveResourceRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEffectiveResourceRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEffectiveResourceRspValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEffectiveResourceRspMultiError(errors)
	}

	return nil
}

// GetEffectiveResourceRspMultiError is an error wrapping multiple validation
// errors returned by GetEffectiveResourceRsp.ValidateAll() if the designated
// constraints aren't met.
type GetEffectiveResourceRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEffectiveResourceRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEffectiveResourceRspMultiError) AllErrors() []error { return m }

// GetEffectiveResourceRspValidationError is the validation error returned by
// GetEffectiveResourceRsp.Validate if the designated constraints aren't met.
type GetEffectiveResourceRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEffectiveResourceRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEffectiveResourceRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEffectiveResourceRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEffectiveResourceRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEffectiveResourceRspValidationError) ErrorName() string {
	return "GetEffectiveResourceRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetEffectiveResourceRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEffectiveResourceRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEffectiveResourceRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEffectiveResourceRspValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Describe

	// no validation rules for IsEnable

	// no validation rules for CreateUser

	// no validation rules for UpdateUser

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on SearchRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRoleReqMultiError, or
// nil if none found.
func (m *SearchRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	if m.GetPageNum() <= 0 {
		err := SearchRoleReqValidationError{
			field:  "PageNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := SearchRoleReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchRoleReqMultiError(errors)
	}

	return nil
}

// SearchRoleReqMultiError is an error wrapping multiple validation errors
// returned by SearchRoleReq.ValidateAll() if the designated constraints
// aren't met.
type SearchRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRoleReqMultiError) AllErrors() []error { return m }

// SearchRoleReqValidationError is the validation error returned by
// SearchRoleReq.Validate if the designated constraints aren't met.
type SearchRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRoleReqValidationError) ErrorName() string { return "SearchRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRoleReqValidationError{}

// Validate checks the field values on SearchRoleRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRoleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRoleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRoleRspMultiError, or
// nil if none found.
func (m *SearchRoleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRoleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchRoleRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchRoleRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchRoleRspValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchRoleRspMultiError(errors)
	}

	return nil
}

// SearchRoleRspMultiError is an error wrapping multiple validation errors
// returned by SearchRoleRsp.ValidateAll() if the designated constraints
// aren't met.
type SearchRoleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRoleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRoleRspMultiError) AllErrors() []error { return m }

// SearchRoleRspValidationError is the validation error returned by
// SearchRoleRsp.Validate if the designated constraints aren't met.
type SearchRoleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRoleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRoleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRoleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRoleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRoleRspValidationError) ErrorName() string { return "SearchRoleRspValidationError" }

// Error satisfies the builtin error interface
func (e SearchRoleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRoleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRoleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRoleRspValidationError{}

// Validate checks the field values on RoleDetailReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleDetailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleDetailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleDetailReqMultiError, or
// nil if none found.
func (m *RoleDetailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleDetailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RoleDetailReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleDetailReqMultiError(errors)
	}

	return nil
}

// RoleDetailReqMultiError is an error wrapping multiple validation errors
// returned by RoleDetailReq.ValidateAll() if the designated constraints
// aren't met.
type RoleDetailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleDetailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleDetailReqMultiError) AllErrors() []error { return m }

// RoleDetailReqValidationError is the validation error returned by
// RoleDetailReq.Validate if the designated constraints aren't met.
type RoleDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDetailReqValidationError) ErrorName() string { return "RoleDetailReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDetailReqValidationError{}

// Validate checks the field values on AddOrUpdateRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrUpdateRoleReqMultiError, or nil if none found.
func (m *AddOrUpdateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AddOrUpdateRoleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddOrUpdateRoleReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := AddOrUpdateRoleReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	// no validation rules for IsEnable

	if len(errors) > 0 {
		return AddOrUpdateRoleReqMultiError(errors)
	}

	return nil
}

// AddOrUpdateRoleReqMultiError is an error wrapping multiple validation errors
// returned by AddOrUpdateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type AddOrUpdateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateRoleReqMultiError) AllErrors() []error { return m }

// AddOrUpdateRoleReqValidationError is the validation error returned by
// AddOrUpdateRoleReq.Validate if the designated constraints aren't met.
type AddOrUpdateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateRoleReqValidationError) ErrorName() string {
	return "AddOrUpdateRoleReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateRoleReqValidationError{}

// Validate checks the field values on DeleteRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRoleReqMultiError, or
// nil if none found.
func (m *DeleteRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteRoleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoleReqMultiError(errors)
	}

	return nil
}

// DeleteRoleReqMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleReqMultiError) AllErrors() []error { return m }

// DeleteRoleReqValidationError is the validation error returned by
// DeleteRoleReq.Validate if the designated constraints aren't met.
type DeleteRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleReqValidationError) ErrorName() string { return "DeleteRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleReqValidationError{}

// Validate checks the field values on RoleAuthority with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleAuthority) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleAuthority with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleAuthorityMultiError, or
// nil if none found.
func (m *RoleAuthority) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleAuthority) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AuthorityId

	// no validation rules for AuthorityType

	// no validation rules for RoleId

	// no validation rules for CreateUser

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return RoleAuthorityMultiError(errors)
	}

	return nil
}

// RoleAuthorityMultiError is an error wrapping multiple validation errors
// returned by RoleAuthority.ValidateAll() if the designated constraints
// aren't met.
type RoleAuthorityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleAuthorityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleAuthorityMultiError) AllErrors() []error { return m }

// RoleAuthorityValidationError is the validation error returned by
// RoleAuthority.Validate if the designated constraints aren't met.
type RoleAuthorityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleAuthorityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleAuthorityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleAuthorityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleAuthorityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleAuthorityValidationError) ErrorName() string { return "RoleAuthorityValidationError" }

// Error satisfies the builtin error interface
func (e RoleAuthorityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleAuthority.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleAuthorityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleAuthorityValidationError{}

// Validate checks the field values on UserRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRoleMultiError, or nil
// if none found.
func (m *UserRole) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for CreateUser

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return UserRoleMultiError(errors)
	}

	return nil
}

// UserRoleMultiError is an error wrapping multiple validation errors returned
// by UserRole.ValidateAll() if the designated constraints aren't met.
type UserRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRoleMultiError) AllErrors() []error { return m }

// UserRoleValidationError is the validation error returned by
// UserRole.Validate if the designated constraints aren't met.
type UserRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRoleValidationError) ErrorName() string { return "UserRoleValidationError" }

// Error satisfies the builtin error interface
func (e UserRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRoleValidationError{}

// Validate checks the field values on RoleBindMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleBindMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleBindMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleBindMenuReqMultiError, or nil if none found.
func (m *RoleBindMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleBindMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := RoleBindMenuReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMenuIds()) < 1 {
		err := RoleBindMenuReqValidationError{
			field:  "MenuIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleBindMenuReqMultiError(errors)
	}

	return nil
}

// RoleBindMenuReqMultiError is an error wrapping multiple validation errors
// returned by RoleBindMenuReq.ValidateAll() if the designated constraints
// aren't met.
type RoleBindMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleBindMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleBindMenuReqMultiError) AllErrors() []error { return m }

// RoleBindMenuReqValidationError is the validation error returned by
// RoleBindMenuReq.Validate if the designated constraints aren't met.
type RoleBindMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleBindMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleBindMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleBindMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleBindMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleBindMenuReqValidationError) ErrorName() string { return "RoleBindMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleBindMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleBindMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleBindMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleBindMenuReqValidationError{}

// Validate checks the field values on RoleBindResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleBindResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleBindResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleBindResourceReqMultiError, or nil if none found.
func (m *RoleBindResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleBindResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := RoleBindResourceReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetResourceIds()) < 1 {
		err := RoleBindResourceReqValidationError{
			field:  "ResourceIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleBindResourceReqMultiError(errors)
	}

	return nil
}

// RoleBindResourceReqMultiError is an error wrapping multiple validation
// errors returned by RoleBindResourceReq.ValidateAll() if the designated
// constraints aren't met.
type RoleBindResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleBindResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleBindResourceReqMultiError) AllErrors() []error { return m }

// RoleBindResourceReqValidationError is the validation error returned by
// RoleBindResourceReq.Validate if the designated constraints aren't met.
type RoleBindResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleBindResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleBindResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleBindResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleBindResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleBindResourceReqValidationError) ErrorName() string {
	return "RoleBindResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e RoleBindResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleBindResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleBindResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleBindResourceReqValidationError{}

// Validate checks the field values on UserBindRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserBindRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBindRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserBindRoleReqMultiError, or nil if none found.
func (m *UserBindRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBindRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := UserBindRoleReqValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoleIds()) < 1 {
		err := UserBindRoleReqValidationError{
			field:  "RoleIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserBindRoleReqMultiError(errors)
	}

	return nil
}

// UserBindRoleReqMultiError is an error wrapping multiple validation errors
// returned by UserBindRoleReq.ValidateAll() if the designated constraints
// aren't met.
type UserBindRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBindRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBindRoleReqMultiError) AllErrors() []error { return m }

// UserBindRoleReqValidationError is the validation error returned by
// UserBindRoleReq.Validate if the designated constraints aren't met.
type UserBindRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBindRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBindRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBindRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBindRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBindRoleReqValidationError) ErrorName() string { return "UserBindRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e UserBindRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBindRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBindRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBindRoleReqValidationError{}

// Validate checks the field values on GetUserRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRoleReqMultiError,
// or nil if none found.
func (m *GetUserRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetUserIds()) < 1 {
		err := GetUserRoleReqValidationError{
			field:  "UserIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRoleReqMultiError(errors)
	}

	return nil
}

// GetUserRoleReqMultiError is an error wrapping multiple validation errors
// returned by GetUserRoleReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRoleReqMultiError) AllErrors() []error { return m }

// GetUserRoleReqValidationError is the validation error returned by
// GetUserRoleReq.Validate if the designated constraints aren't met.
type GetUserRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRoleReqValidationError) ErrorName() string { return "GetUserRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRoleReqValidationError{}

// Validate checks the field values on GetUserRoleRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRoleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRoleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRoleRspMultiError,
// or nil if none found.
func (m *GetUserRoleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRoleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]uint32, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetUserRoleRspValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetUserRoleRspValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetUserRoleRspValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetUserRoleRspMultiError(errors)
	}

	return nil
}

// GetUserRoleRspMultiError is an error wrapping multiple validation errors
// returned by GetUserRoleRsp.ValidateAll() if the designated constraints
// aren't met.
type GetUserRoleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRoleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRoleRspMultiError) AllErrors() []error { return m }

// GetUserRoleRspValidationError is the validation error returned by
// GetUserRoleRsp.Validate if the designated constraints aren't met.
type GetUserRoleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRoleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRoleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRoleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRoleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRoleRspValidationError) ErrorName() string { return "GetUserRoleRspValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRoleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRoleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRoleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRoleRspValidationError{}

// Validate checks the field values on GetUserResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResourceReqMultiError, or nil if none found.
func (m *GetUserResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserResourceReqValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserResourceReqMultiError(errors)
	}

	return nil
}

// GetUserResourceReqMultiError is an error wrapping multiple validation errors
// returned by GetUserResourceReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResourceReqMultiError) AllErrors() []error { return m }

// GetUserResourceReqValidationError is the validation error returned by
// GetUserResourceReq.Validate if the designated constraints aren't met.
type GetUserResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResourceReqValidationError) ErrorName() string {
	return "GetUserResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResourceReqValidationError{}

// Validate checks the field values on GetUserResourceRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserResourceRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResourceRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResourceRspMultiError, or nil if none found.
func (m *GetUserResourceRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResourceRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserResourceRspMultiError(errors)
	}

	return nil
}

// GetUserResourceRspMultiError is an error wrapping multiple validation errors
// returned by GetUserResourceRsp.ValidateAll() if the designated constraints
// aren't met.
type GetUserResourceRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResourceRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResourceRspMultiError) AllErrors() []error { return m }

// GetUserResourceRspValidationError is the validation error returned by
// GetUserResourceRsp.Validate if the designated constraints aren't met.
type GetUserResourceRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResourceRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResourceRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResourceRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResourceRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResourceRspValidationError) ErrorName() string {
	return "GetUserResourceRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserResourceRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResourceRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResourceRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResourceRspValidationError{}
