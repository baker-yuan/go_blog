// Code generated by MockGen. DO NOT EDIT.
// Source: blog.trpc.go

// Package blog is a generated GoMock package.
package blog

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockBlogApiService is a mock of BlogApiService interface.
type MockBlogApiService struct {
	ctrl     *gomock.Controller
	recorder *MockBlogApiServiceMockRecorder
}

// MockBlogApiServiceMockRecorder is the mock recorder for MockBlogApiService.
type MockBlogApiServiceMockRecorder struct {
	mock *MockBlogApiService
}

// NewMockBlogApiService creates a new mock instance.
func NewMockBlogApiService(ctrl *gomock.Controller) *MockBlogApiService {
	mock := &MockBlogApiService{ctrl: ctrl}
	mock.recorder = &MockBlogApiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogApiService) EXPECT() *MockBlogApiServiceMockRecorder {
	return m.recorder
}

// AddOrUpdateArticle mocks base method.
func (m *MockBlogApiService) AddOrUpdateArticle(ctx context.Context, req *AddOrUpdateArticleReq) (*AddOrUpdateRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateArticle", ctx, req)
	ret0, _ := ret[0].(*AddOrUpdateRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrUpdateArticle indicates an expected call of AddOrUpdateArticle.
func (mr *MockBlogApiServiceMockRecorder) AddOrUpdateArticle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateArticle", reflect.TypeOf((*MockBlogApiService)(nil).AddOrUpdateArticle), ctx, req)
}

// ArticleDetail mocks base method.
func (m *MockBlogApiService) ArticleDetail(ctx context.Context, req *ArticleDetailReq) (*Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArticleDetail", ctx, req)
	ret0, _ := ret[0].(*Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArticleDetail indicates an expected call of ArticleDetail.
func (mr *MockBlogApiServiceMockRecorder) ArticleDetail(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArticleDetail", reflect.TypeOf((*MockBlogApiService)(nil).ArticleDetail), ctx, req)
}

// DeleteArticle mocks base method.
func (m *MockBlogApiService) DeleteArticle(ctx context.Context, req *DeleteArticleReq) (*EmptyRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", ctx, req)
	ret0, _ := ret[0].(*EmptyRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockBlogApiServiceMockRecorder) DeleteArticle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockBlogApiService)(nil).DeleteArticle), ctx, req)
}

// SearchArticle mocks base method.
func (m *MockBlogApiService) SearchArticle(ctx context.Context, req *SearchArticleReq) (*SearchArticleRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchArticle", ctx, req)
	ret0, _ := ret[0].(*SearchArticleRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchArticle indicates an expected call of SearchArticle.
func (mr *MockBlogApiServiceMockRecorder) SearchArticle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArticle", reflect.TypeOf((*MockBlogApiService)(nil).SearchArticle), ctx, req)
}

// MockBlogApiClientProxy is a mock of BlogApiClientProxy interface.
type MockBlogApiClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockBlogApiClientProxyMockRecorder
}

// MockBlogApiClientProxyMockRecorder is the mock recorder for MockBlogApiClientProxy.
type MockBlogApiClientProxyMockRecorder struct {
	mock *MockBlogApiClientProxy
}

// NewMockBlogApiClientProxy creates a new mock instance.
func NewMockBlogApiClientProxy(ctrl *gomock.Controller) *MockBlogApiClientProxy {
	mock := &MockBlogApiClientProxy{ctrl: ctrl}
	mock.recorder = &MockBlogApiClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogApiClientProxy) EXPECT() *MockBlogApiClientProxyMockRecorder {
	return m.recorder
}

// AddOrUpdateArticle mocks base method.
func (m *MockBlogApiClientProxy) AddOrUpdateArticle(ctx context.Context, req *AddOrUpdateArticleReq, opts ...client.Option) (*AddOrUpdateRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddOrUpdateArticle", varargs...)
	ret0, _ := ret[0].(*AddOrUpdateRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrUpdateArticle indicates an expected call of AddOrUpdateArticle.
func (mr *MockBlogApiClientProxyMockRecorder) AddOrUpdateArticle(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateArticle", reflect.TypeOf((*MockBlogApiClientProxy)(nil).AddOrUpdateArticle), varargs...)
}

// ArticleDetail mocks base method.
func (m *MockBlogApiClientProxy) ArticleDetail(ctx context.Context, req *ArticleDetailReq, opts ...client.Option) (*Article, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArticleDetail", varargs...)
	ret0, _ := ret[0].(*Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArticleDetail indicates an expected call of ArticleDetail.
func (mr *MockBlogApiClientProxyMockRecorder) ArticleDetail(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArticleDetail", reflect.TypeOf((*MockBlogApiClientProxy)(nil).ArticleDetail), varargs...)
}

// DeleteArticle mocks base method.
func (m *MockBlogApiClientProxy) DeleteArticle(ctx context.Context, req *DeleteArticleReq, opts ...client.Option) (*EmptyRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteArticle", varargs...)
	ret0, _ := ret[0].(*EmptyRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockBlogApiClientProxyMockRecorder) DeleteArticle(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockBlogApiClientProxy)(nil).DeleteArticle), varargs...)
}

// SearchArticle mocks base method.
func (m *MockBlogApiClientProxy) SearchArticle(ctx context.Context, req *SearchArticleReq, opts ...client.Option) (*SearchArticleRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchArticle", varargs...)
	ret0, _ := ret[0].(*SearchArticleRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchArticle indicates an expected call of SearchArticle.
func (mr *MockBlogApiClientProxyMockRecorder) SearchArticle(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArticle", reflect.TypeOf((*MockBlogApiClientProxy)(nil).SearchArticle), varargs...)
}
