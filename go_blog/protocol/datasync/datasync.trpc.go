// Code generated by trpc-go/trpc-cmdline v1.0.6. DO NOT EDIT.
// source: datasync/datasync.proto

package datasync

import (
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// DataSyncApiService defines service.
type DataSyncApiService interface {
}

// DataSyncApiServer_ServiceDesc descriptor for server.RegisterService.
var DataSyncApiServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "go_blog.blog.DataSyncApi",
	HandlerType: ((*DataSyncApiService)(nil)),
	Methods:     []server.Method{},
}

// RegisterDataSyncApiService registers service.
func RegisterDataSyncApiService(s server.Service, svr DataSyncApiService) {
	if err := s.Register(&DataSyncApiServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("DataSyncApi register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedDataSyncApi struct{}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// DataSyncApiClientProxy defines service client proxy
type DataSyncApiClientProxy interface {
}

type DataSyncApiClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewDataSyncApiClientProxy = func(opts ...client.Option) DataSyncApiClientProxy {
	return &DataSyncApiClientProxyImpl{client: client.DefaultClient, opts: opts}
}

// END ======================================= Client Service Definition ======================================= END
