// Code generated by trpc-go/trpc-cmdline v1.0.6. DO NOT EDIT.
// source: template/template.proto

package template

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// TemplateApiService defines service.
type TemplateApiService interface {
	// SearchFriendLink 友链搜索
	SearchFriendLink(ctx context.Context, req *SearchFriendLinkReq) (*SearchFriendLinkRsp, error)
	// AddOrUpdateFriendLink 添加修改友链
	AddOrUpdateFriendLink(ctx context.Context, req *AddOrUpdateFriendLinkReq) (*AddOrUpdateRsp, error)
	// DeleteFriendLink 删除友链
	DeleteFriendLink(ctx context.Context, req *DeleteFriendLinkReq) (*EmptyRsp, error)
	// FriendLinkDetail 友链详情
	FriendLinkDetail(ctx context.Context, req *FriendLinkDetailReq) (*FriendLink, error)
}

func TemplateApiService_SearchFriendLink_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &SearchFriendLinkReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(TemplateApiService).SearchFriendLink(ctx, reqbody.(*SearchFriendLinkReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TemplateApiService_AddOrUpdateFriendLink_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddOrUpdateFriendLinkReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(TemplateApiService).AddOrUpdateFriendLink(ctx, reqbody.(*AddOrUpdateFriendLinkReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TemplateApiService_DeleteFriendLink_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DeleteFriendLinkReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(TemplateApiService).DeleteFriendLink(ctx, reqbody.(*DeleteFriendLinkReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TemplateApiService_FriendLinkDetail_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &FriendLinkDetailReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(TemplateApiService).FriendLinkDetail(ctx, reqbody.(*FriendLinkDetailReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// TemplateApiServer_ServiceDesc descriptor for server.RegisterService.
var TemplateApiServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "blog.template.TemplateApi",
	HandlerType: ((*TemplateApiService)(nil)),
	Methods: []server.Method{
		{
			Name: "/blog.template.TemplateApi/SearchFriendLink",
			Func: TemplateApiService_SearchFriendLink_Handler,
		},
		{
			Name: "/blog.template.TemplateApi/AddOrUpdateFriendLink",
			Func: TemplateApiService_AddOrUpdateFriendLink_Handler,
		},
		{
			Name: "/blog.template.TemplateApi/DeleteFriendLink",
			Func: TemplateApiService_DeleteFriendLink_Handler,
		},
		{
			Name: "/blog.template.TemplateApi/FriendLinkDetail",
			Func: TemplateApiService_FriendLinkDetail_Handler,
		},
	},
}

// RegisterTemplateApiService registers service.
func RegisterTemplateApiService(s server.Service, svr TemplateApiService) {
	if err := s.Register(&TemplateApiServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("TemplateApi register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedTemplateApi struct{}

// SearchFriendLink 友链搜索
func (s *UnimplementedTemplateApi) SearchFriendLink(ctx context.Context, req *SearchFriendLinkReq) (*SearchFriendLinkRsp, error) {
	return nil, errors.New("rpc SearchFriendLink of service TemplateApi is not implemented")
}

// AddOrUpdateFriendLink 添加修改友链
func (s *UnimplementedTemplateApi) AddOrUpdateFriendLink(ctx context.Context, req *AddOrUpdateFriendLinkReq) (*AddOrUpdateRsp, error) {
	return nil, errors.New("rpc AddOrUpdateFriendLink of service TemplateApi is not implemented")
}

// DeleteFriendLink 删除友链
func (s *UnimplementedTemplateApi) DeleteFriendLink(ctx context.Context, req *DeleteFriendLinkReq) (*EmptyRsp, error) {
	return nil, errors.New("rpc DeleteFriendLink of service TemplateApi is not implemented")
}

// FriendLinkDetail 友链详情
func (s *UnimplementedTemplateApi) FriendLinkDetail(ctx context.Context, req *FriendLinkDetailReq) (*FriendLink, error) {
	return nil, errors.New("rpc FriendLinkDetail of service TemplateApi is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// TemplateApiClientProxy defines service client proxy
type TemplateApiClientProxy interface {
	// SearchFriendLink 友链搜索
	SearchFriendLink(ctx context.Context, req *SearchFriendLinkReq, opts ...client.Option) (rsp *SearchFriendLinkRsp, err error)
	// AddOrUpdateFriendLink 添加修改友链
	AddOrUpdateFriendLink(ctx context.Context, req *AddOrUpdateFriendLinkReq, opts ...client.Option) (rsp *AddOrUpdateRsp, err error)
	// DeleteFriendLink 删除友链
	DeleteFriendLink(ctx context.Context, req *DeleteFriendLinkReq, opts ...client.Option) (rsp *EmptyRsp, err error)
	// FriendLinkDetail 友链详情
	FriendLinkDetail(ctx context.Context, req *FriendLinkDetailReq, opts ...client.Option) (rsp *FriendLink, err error)
}

type TemplateApiClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewTemplateApiClientProxy = func(opts ...client.Option) TemplateApiClientProxy {
	return &TemplateApiClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *TemplateApiClientProxyImpl) SearchFriendLink(ctx context.Context, req *SearchFriendLinkReq, opts ...client.Option) (*SearchFriendLinkRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/blog.template.TemplateApi/SearchFriendLink")
	msg.WithCalleeServiceName(TemplateApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("TemplateApi")
	msg.WithCalleeMethod("SearchFriendLink")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &SearchFriendLinkRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TemplateApiClientProxyImpl) AddOrUpdateFriendLink(ctx context.Context, req *AddOrUpdateFriendLinkReq, opts ...client.Option) (*AddOrUpdateRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/blog.template.TemplateApi/AddOrUpdateFriendLink")
	msg.WithCalleeServiceName(TemplateApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("TemplateApi")
	msg.WithCalleeMethod("AddOrUpdateFriendLink")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &AddOrUpdateRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TemplateApiClientProxyImpl) DeleteFriendLink(ctx context.Context, req *DeleteFriendLinkReq, opts ...client.Option) (*EmptyRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/blog.template.TemplateApi/DeleteFriendLink")
	msg.WithCalleeServiceName(TemplateApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("TemplateApi")
	msg.WithCalleeMethod("DeleteFriendLink")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &EmptyRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TemplateApiClientProxyImpl) FriendLinkDetail(ctx context.Context, req *FriendLinkDetailReq, opts ...client.Option) (*FriendLink, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/blog.template.TemplateApi/FriendLinkDetail")
	msg.WithCalleeServiceName(TemplateApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("TemplateApi")
	msg.WithCalleeMethod("FriendLinkDetail")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &FriendLink{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
