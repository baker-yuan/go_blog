// Code generated by trpc-go/trpc-cmdline v1.0.6. DO NOT EDIT.
// source: user/login.proto

package user

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// LoginApiService defines service.
type LoginApiService interface {
	// Login 登录
	Login(ctx context.Context, req *LoginReq) (*LoginRsp, error)
	// Logout 退出
	Logout(ctx context.Context, req *LogoutReq) (*LogoutRsp, error)
	// Refresh 刷新token
	Refresh(ctx context.Context, req *RefreshReq) (*RefreshRsp, error)
}

func LoginApiService_Login_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &LoginReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(LoginApiService).Login(ctx, reqbody.(*LoginReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func LoginApiService_Logout_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &LogoutReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(LoginApiService).Logout(ctx, reqbody.(*LogoutReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func LoginApiService_Refresh_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RefreshReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(LoginApiService).Refresh(ctx, reqbody.(*RefreshReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// LoginApiServer_ServiceDesc descriptor for server.RegisterService.
var LoginApiServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "go_blog.user.LoginApi",
	HandlerType: ((*LoginApiService)(nil)),
	Methods: []server.Method{
		{
			Name: "/user/login",
			Func: LoginApiService_Login_Handler,
		},
		{
			Name: "/user/logout",
			Func: LoginApiService_Logout_Handler,
		},
		{
			Name: "/user/refresh",
			Func: LoginApiService_Refresh_Handler,
		},
		{
			Name: "/go_blog.user.LoginApi/Login",
			Func: LoginApiService_Login_Handler,
		},
		{
			Name: "/go_blog.user.LoginApi/Logout",
			Func: LoginApiService_Logout_Handler,
		},
		{
			Name: "/go_blog.user.LoginApi/Refresh",
			Func: LoginApiService_Refresh_Handler,
		},
	},
}

// RegisterLoginApiService registers service.
func RegisterLoginApiService(s server.Service, svr LoginApiService) {
	if err := s.Register(&LoginApiServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("LoginApi register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedLoginApi struct{}

// Login 登录
func (s *UnimplementedLoginApi) Login(ctx context.Context, req *LoginReq) (*LoginRsp, error) {
	return nil, errors.New("rpc Login of service LoginApi is not implemented")
}

// Logout 退出
func (s *UnimplementedLoginApi) Logout(ctx context.Context, req *LogoutReq) (*LogoutRsp, error) {
	return nil, errors.New("rpc Logout of service LoginApi is not implemented")
}

// Refresh 刷新token
func (s *UnimplementedLoginApi) Refresh(ctx context.Context, req *RefreshReq) (*RefreshRsp, error) {
	return nil, errors.New("rpc Refresh of service LoginApi is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// LoginApiClientProxy defines service client proxy
type LoginApiClientProxy interface {
	// Login 登录
	Login(ctx context.Context, req *LoginReq, opts ...client.Option) (rsp *LoginRsp, err error)
	// Logout 退出
	Logout(ctx context.Context, req *LogoutReq, opts ...client.Option) (rsp *LogoutRsp, err error)
	// Refresh 刷新token
	Refresh(ctx context.Context, req *RefreshReq, opts ...client.Option) (rsp *RefreshRsp, err error)
}

type LoginApiClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewLoginApiClientProxy = func(opts ...client.Option) LoginApiClientProxy {
	return &LoginApiClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *LoginApiClientProxyImpl) Login(ctx context.Context, req *LoginReq, opts ...client.Option) (*LoginRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/user/login")
	msg.WithCalleeServiceName(LoginApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("LoginApi")
	msg.WithCalleeMethod("Login")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &LoginRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *LoginApiClientProxyImpl) Logout(ctx context.Context, req *LogoutReq, opts ...client.Option) (*LogoutRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/user/logout")
	msg.WithCalleeServiceName(LoginApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("LoginApi")
	msg.WithCalleeMethod("Logout")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &LogoutRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *LoginApiClientProxyImpl) Refresh(ctx context.Context, req *RefreshReq, opts ...client.Option) (*RefreshRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/user/refresh")
	msg.WithCalleeServiceName(LoginApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("LoginApi")
	msg.WithCalleeMethod("Refresh")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RefreshRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
