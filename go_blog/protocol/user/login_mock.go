// Code generated by MockGen. DO NOT EDIT.
// Source: login.trpc.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockLoginApiService is a mock of LoginApiService interface.
type MockLoginApiService struct {
	ctrl     *gomock.Controller
	recorder *MockLoginApiServiceMockRecorder
}

// MockLoginApiServiceMockRecorder is the mock recorder for MockLoginApiService.
type MockLoginApiServiceMockRecorder struct {
	mock *MockLoginApiService
}

// NewMockLoginApiService creates a new mock instance.
func NewMockLoginApiService(ctrl *gomock.Controller) *MockLoginApiService {
	mock := &MockLoginApiService{ctrl: ctrl}
	mock.recorder = &MockLoginApiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginApiService) EXPECT() *MockLoginApiServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginApiService) Login(ctx context.Context, req *LoginReq) (*LoginRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*LoginRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginApiServiceMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginApiService)(nil).Login), ctx, req)
}

// Logout mocks base method.
func (m *MockLoginApiService) Logout(ctx context.Context, req *LogoutReq) (*LogoutRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, req)
	ret0, _ := ret[0].(*LogoutRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockLoginApiServiceMockRecorder) Logout(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockLoginApiService)(nil).Logout), ctx, req)
}

// Refresh mocks base method.
func (m *MockLoginApiService) Refresh(ctx context.Context, req *RefreshReq) (*RefreshRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, req)
	ret0, _ := ret[0].(*RefreshRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockLoginApiServiceMockRecorder) Refresh(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockLoginApiService)(nil).Refresh), ctx, req)
}

// MockLoginApiClientProxy is a mock of LoginApiClientProxy interface.
type MockLoginApiClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockLoginApiClientProxyMockRecorder
}

// MockLoginApiClientProxyMockRecorder is the mock recorder for MockLoginApiClientProxy.
type MockLoginApiClientProxyMockRecorder struct {
	mock *MockLoginApiClientProxy
}

// NewMockLoginApiClientProxy creates a new mock instance.
func NewMockLoginApiClientProxy(ctrl *gomock.Controller) *MockLoginApiClientProxy {
	mock := &MockLoginApiClientProxy{ctrl: ctrl}
	mock.recorder = &MockLoginApiClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginApiClientProxy) EXPECT() *MockLoginApiClientProxyMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginApiClientProxy) Login(ctx context.Context, req *LoginReq, opts ...client.Option) (*LoginRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*LoginRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginApiClientProxyMockRecorder) Login(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginApiClientProxy)(nil).Login), varargs...)
}

// Logout mocks base method.
func (m *MockLoginApiClientProxy) Logout(ctx context.Context, req *LogoutReq, opts ...client.Option) (*LogoutRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Logout", varargs...)
	ret0, _ := ret[0].(*LogoutRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockLoginApiClientProxyMockRecorder) Logout(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockLoginApiClientProxy)(nil).Logout), varargs...)
}

// Refresh mocks base method.
func (m *MockLoginApiClientProxy) Refresh(ctx context.Context, req *RefreshReq, opts ...client.Option) (*RefreshRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Refresh", varargs...)
	ret0, _ := ret[0].(*RefreshRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockLoginApiClientProxyMockRecorder) Refresh(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockLoginApiClientProxy)(nil).Refresh), varargs...)
}
