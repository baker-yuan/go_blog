// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/distribution.proto

package distribution

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Distribution with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Distribution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Distribution with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DistributionMultiError, or
// nil if none found.
func (m *Distribution) ValidateAll() error {
	return m.validate(true)
}

func (m *Distribution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for Mean

	// no validation rules for SumOfSquaredDeviation

	if all {
		switch v := interface{}(m.GetRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DistributionValidationError{
					field:  "Range",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DistributionValidationError{
					field:  "Range",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributionValidationError{
				field:  "Range",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBucketOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DistributionValidationError{
					field:  "BucketOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DistributionValidationError{
					field:  "BucketOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBucketOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributionValidationError{
				field:  "BucketOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetExemplars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DistributionValidationError{
						field:  fmt.Sprintf("Exemplars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DistributionValidationError{
						field:  fmt.Sprintf("Exemplars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DistributionValidationError{
					field:  fmt.Sprintf("Exemplars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DistributionMultiError(errors)
	}

	return nil
}

// DistributionMultiError is an error wrapping multiple validation errors
// returned by Distribution.ValidateAll() if the designated constraints aren't met.
type DistributionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributionMultiError) AllErrors() []error { return m }

// DistributionValidationError is the validation error returned by
// Distribution.Validate if the designated constraints aren't met.
type DistributionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributionValidationError) ErrorName() string { return "DistributionValidationError" }

// Error satisfies the builtin error interface
func (e DistributionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistribution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributionValidationError{}

// Validate checks the field values on Distribution_Range with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Distribution_Range) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Distribution_Range with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Distribution_RangeMultiError, or nil if none found.
func (m *Distribution_Range) ValidateAll() error {
	return m.validate(true)
}

func (m *Distribution_Range) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Min

	// no validation rules for Max

	if len(errors) > 0 {
		return Distribution_RangeMultiError(errors)
	}

	return nil
}

// Distribution_RangeMultiError is an error wrapping multiple validation errors
// returned by Distribution_Range.ValidateAll() if the designated constraints
// aren't met.
type Distribution_RangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Distribution_RangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Distribution_RangeMultiError) AllErrors() []error { return m }

// Distribution_RangeValidationError is the validation error returned by
// Distribution_Range.Validate if the designated constraints aren't met.
type Distribution_RangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Distribution_RangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Distribution_RangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Distribution_RangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Distribution_RangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Distribution_RangeValidationError) ErrorName() string {
	return "Distribution_RangeValidationError"
}

// Error satisfies the builtin error interface
func (e Distribution_RangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistribution_Range.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Distribution_RangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Distribution_RangeValidationError{}

// Validate checks the field values on Distribution_BucketOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Distribution_BucketOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Distribution_BucketOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Distribution_BucketOptionsMultiError, or nil if none found.
func (m *Distribution_BucketOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *Distribution_BucketOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Options.(type) {
	case *Distribution_BucketOptions_LinearBuckets:
		if v == nil {
			err := Distribution_BucketOptionsValidationError{
				field:  "Options",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLinearBuckets()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Distribution_BucketOptionsValidationError{
						field:  "LinearBuckets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Distribution_BucketOptionsValidationError{
						field:  "LinearBuckets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLinearBuckets()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Distribution_BucketOptionsValidationError{
					field:  "LinearBuckets",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Distribution_BucketOptions_ExponentialBuckets:
		if v == nil {
			err := Distribution_BucketOptionsValidationError{
				field:  "Options",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExponentialBuckets()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Distribution_BucketOptionsValidationError{
						field:  "ExponentialBuckets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Distribution_BucketOptionsValidationError{
						field:  "ExponentialBuckets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExponentialBuckets()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Distribution_BucketOptionsValidationError{
					field:  "ExponentialBuckets",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Distribution_BucketOptions_ExplicitBuckets:
		if v == nil {
			err := Distribution_BucketOptionsValidationError{
				field:  "Options",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExplicitBuckets()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Distribution_BucketOptionsValidationError{
						field:  "ExplicitBuckets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Distribution_BucketOptionsValidationError{
						field:  "ExplicitBuckets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExplicitBuckets()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Distribution_BucketOptionsValidationError{
					field:  "ExplicitBuckets",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Distribution_BucketOptionsMultiError(errors)
	}

	return nil
}

// Distribution_BucketOptionsMultiError is an error wrapping multiple
// validation errors returned by Distribution_BucketOptions.ValidateAll() if
// the designated constraints aren't met.
type Distribution_BucketOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Distribution_BucketOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Distribution_BucketOptionsMultiError) AllErrors() []error { return m }

// Distribution_BucketOptionsValidationError is the validation error returned
// by Distribution_BucketOptions.Validate if the designated constraints aren't met.
type Distribution_BucketOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Distribution_BucketOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Distribution_BucketOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Distribution_BucketOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Distribution_BucketOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Distribution_BucketOptionsValidationError) ErrorName() string {
	return "Distribution_BucketOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e Distribution_BucketOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistribution_BucketOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Distribution_BucketOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Distribution_BucketOptionsValidationError{}

// Validate checks the field values on Distribution_Exemplar with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Distribution_Exemplar) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Distribution_Exemplar with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Distribution_ExemplarMultiError, or nil if none found.
func (m *Distribution_Exemplar) ValidateAll() error {
	return m.validate(true)
}

func (m *Distribution_Exemplar) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Distribution_ExemplarValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Distribution_ExemplarValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Distribution_ExemplarValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Distribution_ExemplarValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Distribution_ExemplarValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Distribution_ExemplarValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Distribution_ExemplarMultiError(errors)
	}

	return nil
}

// Distribution_ExemplarMultiError is an error wrapping multiple validation
// errors returned by Distribution_Exemplar.ValidateAll() if the designated
// constraints aren't met.
type Distribution_ExemplarMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Distribution_ExemplarMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Distribution_ExemplarMultiError) AllErrors() []error { return m }

// Distribution_ExemplarValidationError is the validation error returned by
// Distribution_Exemplar.Validate if the designated constraints aren't met.
type Distribution_ExemplarValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Distribution_ExemplarValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Distribution_ExemplarValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Distribution_ExemplarValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Distribution_ExemplarValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Distribution_ExemplarValidationError) ErrorName() string {
	return "Distribution_ExemplarValidationError"
}

// Error satisfies the builtin error interface
func (e Distribution_ExemplarValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistribution_Exemplar.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Distribution_ExemplarValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Distribution_ExemplarValidationError{}

// Validate checks the field values on Distribution_BucketOptions_Linear with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Distribution_BucketOptions_Linear) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Distribution_BucketOptions_Linear
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Distribution_BucketOptions_LinearMultiError, or nil if none found.
func (m *Distribution_BucketOptions_Linear) ValidateAll() error {
	return m.validate(true)
}

func (m *Distribution_BucketOptions_Linear) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumFiniteBuckets

	// no validation rules for Width

	// no validation rules for Offset

	if len(errors) > 0 {
		return Distribution_BucketOptions_LinearMultiError(errors)
	}

	return nil
}

// Distribution_BucketOptions_LinearMultiError is an error wrapping multiple
// validation errors returned by
// Distribution_BucketOptions_Linear.ValidateAll() if the designated
// constraints aren't met.
type Distribution_BucketOptions_LinearMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Distribution_BucketOptions_LinearMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Distribution_BucketOptions_LinearMultiError) AllErrors() []error { return m }

// Distribution_BucketOptions_LinearValidationError is the validation error
// returned by Distribution_BucketOptions_Linear.Validate if the designated
// constraints aren't met.
type Distribution_BucketOptions_LinearValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Distribution_BucketOptions_LinearValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Distribution_BucketOptions_LinearValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Distribution_BucketOptions_LinearValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Distribution_BucketOptions_LinearValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Distribution_BucketOptions_LinearValidationError) ErrorName() string {
	return "Distribution_BucketOptions_LinearValidationError"
}

// Error satisfies the builtin error interface
func (e Distribution_BucketOptions_LinearValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistribution_BucketOptions_Linear.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Distribution_BucketOptions_LinearValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Distribution_BucketOptions_LinearValidationError{}

// Validate checks the field values on Distribution_BucketOptions_Exponential
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *Distribution_BucketOptions_Exponential) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// Distribution_BucketOptions_Exponential with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// Distribution_BucketOptions_ExponentialMultiError, or nil if none found.
func (m *Distribution_BucketOptions_Exponential) ValidateAll() error {
	return m.validate(true)
}

func (m *Distribution_BucketOptions_Exponential) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumFiniteBuckets

	// no validation rules for GrowthFactor

	// no validation rules for Scale

	if len(errors) > 0 {
		return Distribution_BucketOptions_ExponentialMultiError(errors)
	}

	return nil
}

// Distribution_BucketOptions_ExponentialMultiError is an error wrapping
// multiple validation errors returned by
// Distribution_BucketOptions_Exponential.ValidateAll() if the designated
// constraints aren't met.
type Distribution_BucketOptions_ExponentialMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Distribution_BucketOptions_ExponentialMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Distribution_BucketOptions_ExponentialMultiError) AllErrors() []error { return m }

// Distribution_BucketOptions_ExponentialValidationError is the validation
// error returned by Distribution_BucketOptions_Exponential.Validate if the
// designated constraints aren't met.
type Distribution_BucketOptions_ExponentialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Distribution_BucketOptions_ExponentialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Distribution_BucketOptions_ExponentialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Distribution_BucketOptions_ExponentialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Distribution_BucketOptions_ExponentialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Distribution_BucketOptions_ExponentialValidationError) ErrorName() string {
	return "Distribution_BucketOptions_ExponentialValidationError"
}

// Error satisfies the builtin error interface
func (e Distribution_BucketOptions_ExponentialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistribution_BucketOptions_Exponential.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Distribution_BucketOptions_ExponentialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Distribution_BucketOptions_ExponentialValidationError{}

// Validate checks the field values on Distribution_BucketOptions_Explicit with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Distribution_BucketOptions_Explicit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Distribution_BucketOptions_Explicit
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Distribution_BucketOptions_ExplicitMultiError, or nil if none found.
func (m *Distribution_BucketOptions_Explicit) ValidateAll() error {
	return m.validate(true)
}

func (m *Distribution_BucketOptions_Explicit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Distribution_BucketOptions_ExplicitMultiError(errors)
	}

	return nil
}

// Distribution_BucketOptions_ExplicitMultiError is an error wrapping multiple
// validation errors returned by
// Distribution_BucketOptions_Explicit.ValidateAll() if the designated
// constraints aren't met.
type Distribution_BucketOptions_ExplicitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Distribution_BucketOptions_ExplicitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Distribution_BucketOptions_ExplicitMultiError) AllErrors() []error { return m }

// Distribution_BucketOptions_ExplicitValidationError is the validation error
// returned by Distribution_BucketOptions_Explicit.Validate if the designated
// constraints aren't met.
type Distribution_BucketOptions_ExplicitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Distribution_BucketOptions_ExplicitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Distribution_BucketOptions_ExplicitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Distribution_BucketOptions_ExplicitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Distribution_BucketOptions_ExplicitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Distribution_BucketOptions_ExplicitValidationError) ErrorName() string {
	return "Distribution_BucketOptions_ExplicitValidationError"
}

// Error satisfies the builtin error interface
func (e Distribution_BucketOptions_ExplicitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistribution_BucketOptions_Explicit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Distribution_BucketOptions_ExplicitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Distribution_BucketOptions_ExplicitValidationError{}
