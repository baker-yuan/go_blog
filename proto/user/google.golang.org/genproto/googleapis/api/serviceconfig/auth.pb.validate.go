// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/auth.proto

package serviceconfig

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Authentication with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Authentication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Authentication with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthenticationMultiError,
// or nil if none found.
func (m *Authentication) ValidateAll() error {
	return m.validate(true)
}

func (m *Authentication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthenticationValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthenticationValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthenticationValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthenticationValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthenticationValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthenticationValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuthenticationMultiError(errors)
	}

	return nil
}

// AuthenticationMultiError is an error wrapping multiple validation errors
// returned by Authentication.ValidateAll() if the designated constraints
// aren't met.
type AuthenticationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationMultiError) AllErrors() []error { return m }

// AuthenticationValidationError is the validation error returned by
// Authentication.Validate if the designated constraints aren't met.
type AuthenticationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationValidationError) ErrorName() string { return "AuthenticationValidationError" }

// Error satisfies the builtin error interface
func (e AuthenticationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthentication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationValidationError{}

// Validate checks the field values on AuthenticationRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticationRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticationRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticationRuleMultiError, or nil if none found.
func (m *AuthenticationRule) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Selector

	if all {
		switch v := interface{}(m.GetOauth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticationRuleValidationError{
					field:  "Oauth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticationRuleValidationError{
					field:  "Oauth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOauth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticationRuleValidationError{
				field:  "Oauth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AllowWithoutCredential

	for idx, item := range m.GetRequirements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthenticationRuleValidationError{
						field:  fmt.Sprintf("Requirements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthenticationRuleValidationError{
						field:  fmt.Sprintf("Requirements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthenticationRuleValidationError{
					field:  fmt.Sprintf("Requirements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuthenticationRuleMultiError(errors)
	}

	return nil
}

// AuthenticationRuleMultiError is an error wrapping multiple validation errors
// returned by AuthenticationRule.ValidateAll() if the designated constraints
// aren't met.
type AuthenticationRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationRuleMultiError) AllErrors() []error { return m }

// AuthenticationRuleValidationError is the validation error returned by
// AuthenticationRule.Validate if the designated constraints aren't met.
type AuthenticationRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationRuleValidationError) ErrorName() string {
	return "AuthenticationRuleValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationRuleValidationError{}

// Validate checks the field values on AuthProvider with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthProvider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthProviderMultiError, or
// nil if none found.
func (m *AuthProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Issuer

	// no validation rules for JwksUri

	// no validation rules for Audiences

	// no validation rules for AuthorizationUrl

	if len(errors) > 0 {
		return AuthProviderMultiError(errors)
	}

	return nil
}

// AuthProviderMultiError is an error wrapping multiple validation errors
// returned by AuthProvider.ValidateAll() if the designated constraints aren't met.
type AuthProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthProviderMultiError) AllErrors() []error { return m }

// AuthProviderValidationError is the validation error returned by
// AuthProvider.Validate if the designated constraints aren't met.
type AuthProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthProviderValidationError) ErrorName() string { return "AuthProviderValidationError" }

// Error satisfies the builtin error interface
func (e AuthProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthProviderValidationError{}

// Validate checks the field values on OAuthRequirements with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OAuthRequirements) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthRequirements with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuthRequirementsMultiError, or nil if none found.
func (m *OAuthRequirements) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthRequirements) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CanonicalScopes

	if len(errors) > 0 {
		return OAuthRequirementsMultiError(errors)
	}

	return nil
}

// OAuthRequirementsMultiError is an error wrapping multiple validation errors
// returned by OAuthRequirements.ValidateAll() if the designated constraints
// aren't met.
type OAuthRequirementsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthRequirementsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthRequirementsMultiError) AllErrors() []error { return m }

// OAuthRequirementsValidationError is the validation error returned by
// OAuthRequirements.Validate if the designated constraints aren't met.
type OAuthRequirementsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthRequirementsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthRequirementsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthRequirementsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthRequirementsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthRequirementsValidationError) ErrorName() string {
	return "OAuthRequirementsValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthRequirementsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthRequirements.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthRequirementsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthRequirementsValidationError{}

// Validate checks the field values on AuthRequirement with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthRequirement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRequirement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthRequirementMultiError, or nil if none found.
func (m *AuthRequirement) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRequirement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for Audiences

	if len(errors) > 0 {
		return AuthRequirementMultiError(errors)
	}

	return nil
}

// AuthRequirementMultiError is an error wrapping multiple validation errors
// returned by AuthRequirement.ValidateAll() if the designated constraints
// aren't met.
type AuthRequirementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRequirementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRequirementMultiError) AllErrors() []error { return m }

// AuthRequirementValidationError is the validation error returned by
// AuthRequirement.Validate if the designated constraints aren't met.
type AuthRequirementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRequirementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRequirementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRequirementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRequirementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRequirementValidationError) ErrorName() string { return "AuthRequirementValidationError" }

// Error satisfies the builtin error interface
func (e AuthRequirementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRequirement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRequirementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRequirementValidationError{}
