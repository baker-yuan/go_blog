// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/quota.proto

package serviceconfig

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Quota with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Quota) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Quota with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QuotaMultiError, or nil if none found.
func (m *Quota) ValidateAll() error {
	return m.validate(true)
}

func (m *Quota) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuotaValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuotaValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuotaValidationError{
					field:  fmt.Sprintf("Limits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMetricRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuotaValidationError{
						field:  fmt.Sprintf("MetricRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuotaValidationError{
						field:  fmt.Sprintf("MetricRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuotaValidationError{
					field:  fmt.Sprintf("MetricRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuotaMultiError(errors)
	}

	return nil
}

// QuotaMultiError is an error wrapping multiple validation errors returned by
// Quota.ValidateAll() if the designated constraints aren't met.
type QuotaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaMultiError) AllErrors() []error { return m }

// QuotaValidationError is the validation error returned by Quota.Validate if
// the designated constraints aren't met.
type QuotaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaValidationError) ErrorName() string { return "QuotaValidationError" }

// Error satisfies the builtin error interface
func (e QuotaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuota.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaValidationError{}

// Validate checks the field values on MetricRule with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricRuleMultiError, or
// nil if none found.
func (m *MetricRule) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Selector

	// no validation rules for MetricCosts

	if len(errors) > 0 {
		return MetricRuleMultiError(errors)
	}

	return nil
}

// MetricRuleMultiError is an error wrapping multiple validation errors
// returned by MetricRule.ValidateAll() if the designated constraints aren't met.
type MetricRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricRuleMultiError) AllErrors() []error { return m }

// MetricRuleValidationError is the validation error returned by
// MetricRule.Validate if the designated constraints aren't met.
type MetricRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricRuleValidationError) ErrorName() string { return "MetricRuleValidationError" }

// Error satisfies the builtin error interface
func (e MetricRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricRuleValidationError{}

// Validate checks the field values on QuotaLimit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuotaLimit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotaLimit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuotaLimitMultiError, or
// nil if none found.
func (m *QuotaLimit) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotaLimit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for DefaultLimit

	// no validation rules for MaxLimit

	// no validation rules for FreeTier

	// no validation rules for Duration

	// no validation rules for Metric

	// no validation rules for Unit

	// no validation rules for Values

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return QuotaLimitMultiError(errors)
	}

	return nil
}

// QuotaLimitMultiError is an error wrapping multiple validation errors
// returned by QuotaLimit.ValidateAll() if the designated constraints aren't met.
type QuotaLimitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaLimitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaLimitMultiError) AllErrors() []error { return m }

// QuotaLimitValidationError is the validation error returned by
// QuotaLimit.Validate if the designated constraints aren't met.
type QuotaLimitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaLimitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaLimitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaLimitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaLimitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaLimitValidationError) ErrorName() string { return "QuotaLimitValidationError" }

// Error satisfies the builtin error interface
func (e QuotaLimitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaLimit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaLimitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaLimitValidationError{}
