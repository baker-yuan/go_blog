// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/system_parameter.proto

package serviceconfig

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SystemParameters with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SystemParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemParameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SystemParametersMultiError, or nil if none found.
func (m *SystemParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemParametersValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemParametersValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemParametersValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SystemParametersMultiError(errors)
	}

	return nil
}

// SystemParametersMultiError is an error wrapping multiple validation errors
// returned by SystemParameters.ValidateAll() if the designated constraints
// aren't met.
type SystemParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemParametersMultiError) AllErrors() []error { return m }

// SystemParametersValidationError is the validation error returned by
// SystemParameters.Validate if the designated constraints aren't met.
type SystemParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemParametersValidationError) ErrorName() string { return "SystemParametersValidationError" }

// Error satisfies the builtin error interface
func (e SystemParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemParametersValidationError{}

// Validate checks the field values on SystemParameterRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SystemParameterRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemParameterRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SystemParameterRuleMultiError, or nil if none found.
func (m *SystemParameterRule) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemParameterRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Selector

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemParameterRuleValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemParameterRuleValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemParameterRuleValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SystemParameterRuleMultiError(errors)
	}

	return nil
}

// SystemParameterRuleMultiError is an error wrapping multiple validation
// errors returned by SystemParameterRule.ValidateAll() if the designated
// constraints aren't met.
type SystemParameterRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemParameterRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemParameterRuleMultiError) AllErrors() []error { return m }

// SystemParameterRuleValidationError is the validation error returned by
// SystemParameterRule.Validate if the designated constraints aren't met.
type SystemParameterRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemParameterRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemParameterRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemParameterRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemParameterRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemParameterRuleValidationError) ErrorName() string {
	return "SystemParameterRuleValidationError"
}

// Error satisfies the builtin error interface
func (e SystemParameterRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemParameterRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemParameterRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemParameterRuleValidationError{}

// Validate checks the field values on SystemParameter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SystemParameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemParameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SystemParameterMultiError, or nil if none found.
func (m *SystemParameter) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemParameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for HttpHeader

	// no validation rules for UrlQueryParameter

	if len(errors) > 0 {
		return SystemParameterMultiError(errors)
	}

	return nil
}

// SystemParameterMultiError is an error wrapping multiple validation errors
// returned by SystemParameter.ValidateAll() if the designated constraints
// aren't met.
type SystemParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemParameterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemParameterMultiError) AllErrors() []error { return m }

// SystemParameterValidationError is the validation error returned by
// SystemParameter.Validate if the designated constraints aren't met.
type SystemParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemParameterValidationError) ErrorName() string { return "SystemParameterValidationError" }

// Error satisfies the builtin error interface
func (e SystemParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemParameterValidationError{}
