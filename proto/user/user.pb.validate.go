// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BaseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseResponseMultiError, or
// nil if none found.
func (m *BaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for TraceId

	// no validation rules for Stack

	if len(errors) > 0 {
		return BaseResponseMultiError(errors)
	}

	return nil
}

// BaseResponseMultiError is an error wrapping multiple validation errors
// returned by BaseResponse.ValidateAll() if the designated constraints aren't met.
type BaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseResponseMultiError) AllErrors() []error { return m }

// BaseResponseValidationError is the validation error returned by
// BaseResponse.Validate if the designated constraints aren't met.
type BaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseResponseValidationError) ErrorName() string { return "BaseResponseValidationError" }

// Error satisfies the builtin error interface
func (e BaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseResponseValidationError{}

// Validate checks the field values on AdminLoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLoginReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminLoginReqMultiError, or
// nil if none found.
func (m *AdminLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 5 || l > 10 {
		err := AdminLoginReqValidationError{
			field:  "Username",
			reason: "value length must be between 5 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 5 || l > 10 {
		err := AdminLoginReqValidationError{
			field:  "Password",
			reason: "value length must be between 5 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AdminLoginReqMultiError(errors)
	}

	return nil
}

// AdminLoginReqMultiError is an error wrapping multiple validation errors
// returned by AdminLoginReq.ValidateAll() if the designated constraints
// aren't met.
type AdminLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLoginReqMultiError) AllErrors() []error { return m }

// AdminLoginReqValidationError is the validation error returned by
// AdminLoginReq.Validate if the designated constraints aren't met.
type AdminLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLoginReqValidationError) ErrorName() string { return "AdminLoginReqValidationError" }

// Error satisfies the builtin error interface
func (e AdminLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLoginReqValidationError{}

// Validate checks the field values on AdminLoginRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminLoginRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLoginRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminLoginRspMultiError, or
// nil if none found.
func (m *AdminLoginRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLoginRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for TraceId

	// no validation rules for Stack

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminLoginRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminLoginRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminLoginRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminLoginRspMultiError(errors)
	}

	return nil
}

// AdminLoginRspMultiError is an error wrapping multiple validation errors
// returned by AdminLoginRsp.ValidateAll() if the designated constraints
// aren't met.
type AdminLoginRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLoginRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLoginRspMultiError) AllErrors() []error { return m }

// AdminLoginRspValidationError is the validation error returned by
// AdminLoginRsp.Validate if the designated constraints aren't met.
type AdminLoginRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLoginRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLoginRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLoginRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLoginRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLoginRspValidationError) ErrorName() string { return "AdminLoginRspValidationError" }

// Error satisfies the builtin error interface
func (e AdminLoginRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLoginRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLoginRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLoginRspValidationError{}

// Validate checks the field values on UserDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDetailMultiError, or
// nil if none found.
func (m *UserDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Intro

	// no validation rules for WebSite

	// no validation rules for IsDisable

	// no validation rules for Username

	// no validation rules for LoginType

	// no validation rules for IpAddress

	// no validation rules for IpSource

	// no validation rules for LastLoginTime

	// no validation rules for Browser

	// no validation rules for Os

	if len(errors) > 0 {
		return UserDetailMultiError(errors)
	}

	return nil
}

// UserDetailMultiError is an error wrapping multiple validation errors
// returned by UserDetail.ValidateAll() if the designated constraints aren't met.
type UserDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDetailMultiError) AllErrors() []error { return m }

// UserDetailValidationError is the validation error returned by
// UserDetail.Validate if the designated constraints aren't met.
type UserDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDetailValidationError) ErrorName() string { return "UserDetailValidationError" }

// Error satisfies the builtin error interface
func (e UserDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDetailValidationError{}

// Validate checks the field values on AdminUpdatePwdReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminUpdatePwdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdatePwdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUpdatePwdReqMultiError, or nil if none found.
func (m *AdminUpdatePwdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdatePwdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOldPassword()); l < 5 || l > 10 {
		err := AdminUpdatePwdReqValidationError{
			field:  "OldPassword",
			reason: "value length must be between 5 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 5 || l > 10 {
		err := AdminUpdatePwdReqValidationError{
			field:  "NewPassword",
			reason: "value length must be between 5 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AdminUpdatePwdReqMultiError(errors)
	}

	return nil
}

// AdminUpdatePwdReqMultiError is an error wrapping multiple validation errors
// returned by AdminUpdatePwdReq.ValidateAll() if the designated constraints
// aren't met.
type AdminUpdatePwdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdatePwdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdatePwdReqMultiError) AllErrors() []error { return m }

// AdminUpdatePwdReqValidationError is the validation error returned by
// AdminUpdatePwdReq.Validate if the designated constraints aren't met.
type AdminUpdatePwdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdatePwdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdatePwdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdatePwdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdatePwdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdatePwdReqValidationError) ErrorName() string {
	return "AdminUpdatePwdReqValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdatePwdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdatePwdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdatePwdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdatePwdReqValidationError{}

// Validate checks the field values on AdminListUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminListUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminListUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminListUserReqMultiError, or nil if none found.
func (m *AdminListUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminListUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LoginType

	// no validation rules for Nickname

	// no validation rules for Current

	// no validation rules for Size

	if len(errors) > 0 {
		return AdminListUserReqMultiError(errors)
	}

	return nil
}

// AdminListUserReqMultiError is an error wrapping multiple validation errors
// returned by AdminListUserReq.ValidateAll() if the designated constraints
// aren't met.
type AdminListUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminListUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminListUserReqMultiError) AllErrors() []error { return m }

// AdminListUserReqValidationError is the validation error returned by
// AdminListUserReq.Validate if the designated constraints aren't met.
type AdminListUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminListUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminListUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminListUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminListUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminListUserReqValidationError) ErrorName() string { return "AdminListUserReqValidationError" }

// Error satisfies the builtin error interface
func (e AdminListUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminListUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminListUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminListUserReqValidationError{}

// Validate checks the field values on AdminListUserRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminListUserRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminListUserRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminListUserRspMultiError, or nil if none found.
func (m *AdminListUserRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminListUserRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for TraceId

	// no validation rules for Stack

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminListUserRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminListUserRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminListUserRspValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminListUserRspMultiError(errors)
	}

	return nil
}

// AdminListUserRspMultiError is an error wrapping multiple validation errors
// returned by AdminListUserRsp.ValidateAll() if the designated constraints
// aren't met.
type AdminListUserRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminListUserRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminListUserRspMultiError) AllErrors() []error { return m }

// AdminListUserRspValidationError is the validation error returned by
// AdminListUserRsp.Validate if the designated constraints aren't met.
type AdminListUserRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminListUserRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminListUserRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminListUserRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminListUserRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminListUserRspValidationError) ErrorName() string { return "AdminListUserRspValidationError" }

// Error satisfies the builtin error interface
func (e AdminListUserRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminListUserRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminListUserRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminListUserRspValidationError{}
