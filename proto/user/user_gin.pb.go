// Code generated by protoc-gen-gin. DO NOT EDIT.

package pb

import (
	gin "github.com/gin-gonic/gin"
	http "net/http"
)

// UserHttpSrv http服务
type UserHttpSrv struct {
	server UserServer  // grpc生成的server
	router gin.IRouter // gin路由
}

// 客户端调用该方法注册
func RegUserServerHttpSrv(srv UserServer, r ...gin.IRouter) {
	var engine gin.IRouter

	// 优先使用传入的router
	if len(r) != 0 {
		engine = r[0]
	} else {
		engine = gin.Default()
	}

	s := UserHttpSrv{
		server: srv,
		router: engine,
	}
	s.RegSrv()
}

func (s *UserHttpSrv) AdminLogin(c *gin.Context) {
	var in AdminLoginReq

	if err := c.ShouldBindJSON(&in); err != nil {
		rsp := Response{
			Code:    http.StatusBadRequest,
			Message: "",
		}
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	out, err := s.server.AdminLogin(c, &in)
	if err != nil {
		rsp := Response{
			Code:    http.StatusInternalServerError,
			Message: "",
		}
		c.JSON(http.StatusInternalServerError, rsp)
		return
	}
	c.JSON(http.StatusOK, out)
}

func (s *UserHttpSrv) AdminUpdatePwd(c *gin.Context) {
	var in AdminUpdatePwdReq

	if err := c.ShouldBindJSON(&in); err != nil {
		rsp := Response{
			Code:    http.StatusBadRequest,
			Message: "",
		}
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	out, err := s.server.AdminUpdatePwd(c, &in)
	if err != nil {
		rsp := Response{
			Code:    http.StatusInternalServerError,
			Message: "",
		}
		c.JSON(http.StatusInternalServerError, rsp)
		return
	}
	c.JSON(http.StatusOK, out)
}

func (s *UserHttpSrv) AdminListUsers(c *gin.Context) {
	var in AdminListUserReq

	if err := c.ShouldBindQuery(&in); err != nil {
		rsp := Response{
			Code:    http.StatusBadRequest,
			Message: "",
		}
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	out, err := s.server.AdminListUsers(c, &in)
	if err != nil {
		rsp := Response{
			Code:    http.StatusInternalServerError,
			Message: "",
		}
		c.JSON(http.StatusInternalServerError, rsp)
		return
	}
	c.JSON(http.StatusOK, out)
}

// RegSrv 路由和对应的处理方法进行绑定
func (s *UserHttpSrv) RegSrv() {

	s.router.Handle("POST", "/user/v1/admin/users/login", s.AdminLogin)

	s.router.Handle("PUT", "/user/v1/admin/users/password", s.AdminUpdatePwd)

	s.router.Handle("GET", "/user/v1/admin/users", s.AdminListUsers)

}
