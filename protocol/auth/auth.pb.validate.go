// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/auth.proto

package auth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmptyRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyRspMultiError, or nil
// if none found.
func (m *EmptyRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyRspMultiError(errors)
	}

	return nil
}

// EmptyRspMultiError is an error wrapping multiple validation errors returned
// by EmptyRsp.ValidateAll() if the designated constraints aren't met.
type EmptyRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyRspMultiError) AllErrors() []error { return m }

// EmptyRspValidationError is the validation error returned by
// EmptyRsp.Validate if the designated constraints aren't met.
type EmptyRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRspValidationError) ErrorName() string { return "EmptyRspValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRspValidationError{}

// Validate checks the field values on AddOrUpdateRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddOrUpdateRspMultiError,
// or nil if none found.
func (m *AddOrUpdateRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddOrUpdateRspMultiError(errors)
	}

	return nil
}

// AddOrUpdateRspMultiError is an error wrapping multiple validation errors
// returned by AddOrUpdateRsp.ValidateAll() if the designated constraints
// aren't met.
type AddOrUpdateRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateRspMultiError) AllErrors() []error { return m }

// AddOrUpdateRspValidationError is the validation error returned by
// AddOrUpdateRsp.Validate if the designated constraints aren't met.
type AddOrUpdateRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateRspValidationError) ErrorName() string { return "AddOrUpdateRspValidationError" }

// Error satisfies the builtin error interface
func (e AddOrUpdateRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateRspValidationError{}

// Validate checks the field values on Menu with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Menu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Menu with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MenuMultiError, or nil if none found.
func (m *Menu) ValidateAll() error {
	return m.validate(true)
}

func (m *Menu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Describe

	// no validation rules for Path

	// no validation rules for Component

	// no validation rules for IsHidden

	// no validation rules for SortValue

	// no validation rules for Icon

	// no validation rules for ParentId

	// no validation rules for CreateUser

	// no validation rules for UpdateUser

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return MenuMultiError(errors)
	}

	return nil
}

// MenuMultiError is an error wrapping multiple validation errors returned by
// Menu.ValidateAll() if the designated constraints aren't met.
type MenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuMultiError) AllErrors() []error { return m }

// MenuValidationError is the validation error returned by Menu.Validate if the
// designated constraints aren't met.
type MenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuValidationError) ErrorName() string { return "MenuValidationError" }

// Error satisfies the builtin error interface
func (e MenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuValidationError{}

// Validate checks the field values on SearchMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchMenuReqMultiError, or
// nil if none found.
func (m *SearchMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageNum != nil {

		if m.GetPageNum() <= 0 {
			err := SearchMenuReqValidationError{
				field:  "PageNum",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.PageSize != nil {

		if m.GetPageSize() <= 0 {
			err := SearchMenuReqValidationError{
				field:  "PageSize",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return SearchMenuReqMultiError(errors)
	}

	return nil
}

// SearchMenuReqMultiError is an error wrapping multiple validation errors
// returned by SearchMenuReq.ValidateAll() if the designated constraints
// aren't met.
type SearchMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMenuReqMultiError) AllErrors() []error { return m }

// SearchMenuReqValidationError is the validation error returned by
// SearchMenuReq.Validate if the designated constraints aren't met.
type SearchMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMenuReqValidationError) ErrorName() string { return "SearchMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMenuReqValidationError{}

// Validate checks the field values on SearchMenuRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchMenuRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchMenuRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchMenuRspMultiError, or
// nil if none found.
func (m *SearchMenuRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchMenuRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchMenuRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchMenuRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchMenuRspValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Total != nil {
		// no validation rules for Total
	}

	if len(errors) > 0 {
		return SearchMenuRspMultiError(errors)
	}

	return nil
}

// SearchMenuRspMultiError is an error wrapping multiple validation errors
// returned by SearchMenuRsp.ValidateAll() if the designated constraints
// aren't met.
type SearchMenuRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMenuRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMenuRspMultiError) AllErrors() []error { return m }

// SearchMenuRspValidationError is the validation error returned by
// SearchMenuRsp.Validate if the designated constraints aren't met.
type SearchMenuRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMenuRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMenuRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMenuRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMenuRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMenuRspValidationError) ErrorName() string { return "SearchMenuRspValidationError" }

// Error satisfies the builtin error interface
func (e SearchMenuRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMenuRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMenuRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMenuRspValidationError{}

// Validate checks the field values on MenuDetailReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuDetailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuDetailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuDetailReqMultiError, or
// nil if none found.
func (m *MenuDetailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuDetailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if m.GetId() <= 0 {
			err := MenuDetailReqValidationError{
				field:  "Id",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MenuDetailReqMultiError(errors)
	}

	return nil
}

// MenuDetailReqMultiError is an error wrapping multiple validation errors
// returned by MenuDetailReq.ValidateAll() if the designated constraints
// aren't met.
type MenuDetailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuDetailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuDetailReqMultiError) AllErrors() []error { return m }

// MenuDetailReqValidationError is the validation error returned by
// MenuDetailReq.Validate if the designated constraints aren't met.
type MenuDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuDetailReqValidationError) ErrorName() string { return "MenuDetailReqValidationError" }

// Error satisfies the builtin error interface
func (e MenuDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuDetailReqValidationError{}

// Validate checks the field values on AddOrUpdateMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrUpdateMenuReqMultiError, or nil if none found.
func (m *AddOrUpdateMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOrUpdateMenuReqMultiError(errors)
	}

	return nil
}

// AddOrUpdateMenuReqMultiError is an error wrapping multiple validation errors
// returned by AddOrUpdateMenuReq.ValidateAll() if the designated constraints
// aren't met.
type AddOrUpdateMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateMenuReqMultiError) AllErrors() []error { return m }

// AddOrUpdateMenuReqValidationError is the validation error returned by
// AddOrUpdateMenuReq.Validate if the designated constraints aren't met.
type AddOrUpdateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateMenuReqValidationError) ErrorName() string {
	return "AddOrUpdateMenuReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateMenuReqValidationError{}

// Validate checks the field values on DeleteMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteMenuReqMultiError, or
// nil if none found.
func (m *DeleteMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if m.GetId() <= 0 {
			err := DeleteMenuReqValidationError{
				field:  "Id",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeleteMenuReqMultiError(errors)
	}

	return nil
}

// DeleteMenuReqMultiError is an error wrapping multiple validation errors
// returned by DeleteMenuReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuReqMultiError) AllErrors() []error { return m }

// DeleteMenuReqValidationError is the validation error returned by
// DeleteMenuReq.Validate if the designated constraints aren't met.
type DeleteMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuReqValidationError) ErrorName() string { return "DeleteMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuReqValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ResourceType

	// no validation rules for Status

	// no validation rules for Url

	// no validation rules for ParentId

	// no validation rules for HttpMethod

	// no validation rules for Describe

	// no validation rules for IsNeedLogin

	// no validation rules for IsNeedPermission

	// no validation rules for Service

	// no validation rules for Method

	// no validation rules for CreateUser

	// no validation rules for UpdateUser

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Describe

	// no validation rules for IsEnable

	// no validation rules for CreateUser

	// no validation rules for UpdateUser

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on RoleAuthority with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleAuthority) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleAuthority with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleAuthorityMultiError, or
// nil if none found.
func (m *RoleAuthority) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleAuthority) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AuthorityId

	// no validation rules for AuthorityType

	// no validation rules for RoleId

	// no validation rules for CreateUser

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return RoleAuthorityMultiError(errors)
	}

	return nil
}

// RoleAuthorityMultiError is an error wrapping multiple validation errors
// returned by RoleAuthority.ValidateAll() if the designated constraints
// aren't met.
type RoleAuthorityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleAuthorityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleAuthorityMultiError) AllErrors() []error { return m }

// RoleAuthorityValidationError is the validation error returned by
// RoleAuthority.Validate if the designated constraints aren't met.
type RoleAuthorityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleAuthorityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleAuthorityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleAuthorityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleAuthorityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleAuthorityValidationError) ErrorName() string { return "RoleAuthorityValidationError" }

// Error satisfies the builtin error interface
func (e RoleAuthorityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleAuthority.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleAuthorityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleAuthorityValidationError{}
