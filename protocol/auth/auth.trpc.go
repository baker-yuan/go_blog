// Code generated by trpc-go/trpc-cmdline v1.0.6. DO NOT EDIT.
// source: auth/auth.proto

package auth

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// AuthApiService defines service.
type AuthApiService interface {
	// SearchMenu 菜单搜索
	SearchMenu(ctx context.Context, req *SearchMenuReq) (*SearchMenuRsp, error)
	// AddOrUpdateMenu 添加修改菜单
	AddOrUpdateMenu(ctx context.Context, req *AddOrUpdateMenuReq) (*AddOrUpdateRsp, error)
	// DeleteMenu 删除菜单
	DeleteMenu(ctx context.Context, req *DeleteMenuReq) (*EmptyRsp, error)
	// MenuDetail 菜单详情
	MenuDetail(ctx context.Context, req *MenuDetailReq) (*Menu, error)
}

func AuthApiService_SearchMenu_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &SearchMenuReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AuthApiService).SearchMenu(ctx, reqbody.(*SearchMenuReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AuthApiService_AddOrUpdateMenu_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddOrUpdateMenuReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AuthApiService).AddOrUpdateMenu(ctx, reqbody.(*AddOrUpdateMenuReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AuthApiService_DeleteMenu_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DeleteMenuReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AuthApiService).DeleteMenu(ctx, reqbody.(*DeleteMenuReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AuthApiService_MenuDetail_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &MenuDetailReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AuthApiService).MenuDetail(ctx, reqbody.(*MenuDetailReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// AuthApiServer_ServiceDesc descriptor for server.RegisterService.
var AuthApiServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "go_blog.auth.AuthApi",
	HandlerType: ((*AuthApiService)(nil)),
	Methods: []server.Method{
		{
			Name: "/auth/admin/searchMenu",
			Func: AuthApiService_SearchMenu_Handler,
		},
		{
			Name: "/auth/admin/updateMenu",
			Func: AuthApiService_AddOrUpdateMenu_Handler,
		},
		{
			Name: "/auth/admin/deleteMenu",
			Func: AuthApiService_DeleteMenu_Handler,
		},
		{
			Name: "/auth/admin/menuDetail",
			Func: AuthApiService_MenuDetail_Handler,
		},
		{
			Name: "/go_blog.auth.AuthApi/SearchMenu",
			Func: AuthApiService_SearchMenu_Handler,
		},
		{
			Name: "/go_blog.auth.AuthApi/AddOrUpdateMenu",
			Func: AuthApiService_AddOrUpdateMenu_Handler,
		},
		{
			Name: "/go_blog.auth.AuthApi/DeleteMenu",
			Func: AuthApiService_DeleteMenu_Handler,
		},
		{
			Name: "/go_blog.auth.AuthApi/MenuDetail",
			Func: AuthApiService_MenuDetail_Handler,
		},
	},
}

// RegisterAuthApiService registers service.
func RegisterAuthApiService(s server.Service, svr AuthApiService) {
	if err := s.Register(&AuthApiServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("AuthApi register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedAuthApi struct{}

// SearchMenu 菜单搜索
func (s *UnimplementedAuthApi) SearchMenu(ctx context.Context, req *SearchMenuReq) (*SearchMenuRsp, error) {
	return nil, errors.New("rpc SearchMenu of service AuthApi is not implemented")
}

// AddOrUpdateMenu 添加修改菜单
func (s *UnimplementedAuthApi) AddOrUpdateMenu(ctx context.Context, req *AddOrUpdateMenuReq) (*AddOrUpdateRsp, error) {
	return nil, errors.New("rpc AddOrUpdateMenu of service AuthApi is not implemented")
}

// DeleteMenu 删除菜单
func (s *UnimplementedAuthApi) DeleteMenu(ctx context.Context, req *DeleteMenuReq) (*EmptyRsp, error) {
	return nil, errors.New("rpc DeleteMenu of service AuthApi is not implemented")
}

// MenuDetail 菜单详情
func (s *UnimplementedAuthApi) MenuDetail(ctx context.Context, req *MenuDetailReq) (*Menu, error) {
	return nil, errors.New("rpc MenuDetail of service AuthApi is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// AuthApiClientProxy defines service client proxy
type AuthApiClientProxy interface {
	// SearchMenu 菜单搜索
	SearchMenu(ctx context.Context, req *SearchMenuReq, opts ...client.Option) (rsp *SearchMenuRsp, err error)
	// AddOrUpdateMenu 添加修改菜单
	AddOrUpdateMenu(ctx context.Context, req *AddOrUpdateMenuReq, opts ...client.Option) (rsp *AddOrUpdateRsp, err error)
	// DeleteMenu 删除菜单
	DeleteMenu(ctx context.Context, req *DeleteMenuReq, opts ...client.Option) (rsp *EmptyRsp, err error)
	// MenuDetail 菜单详情
	MenuDetail(ctx context.Context, req *MenuDetailReq, opts ...client.Option) (rsp *Menu, err error)
}

type AuthApiClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewAuthApiClientProxy = func(opts ...client.Option) AuthApiClientProxy {
	return &AuthApiClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *AuthApiClientProxyImpl) SearchMenu(ctx context.Context, req *SearchMenuReq, opts ...client.Option) (*SearchMenuRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/auth/admin/searchMenu")
	msg.WithCalleeServiceName(AuthApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("AuthApi")
	msg.WithCalleeMethod("SearchMenu")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &SearchMenuRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AuthApiClientProxyImpl) AddOrUpdateMenu(ctx context.Context, req *AddOrUpdateMenuReq, opts ...client.Option) (*AddOrUpdateRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/auth/admin/updateMenu")
	msg.WithCalleeServiceName(AuthApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("AuthApi")
	msg.WithCalleeMethod("AddOrUpdateMenu")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &AddOrUpdateRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AuthApiClientProxyImpl) DeleteMenu(ctx context.Context, req *DeleteMenuReq, opts ...client.Option) (*EmptyRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/auth/admin/deleteMenu")
	msg.WithCalleeServiceName(AuthApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("AuthApi")
	msg.WithCalleeMethod("DeleteMenu")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &EmptyRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AuthApiClientProxyImpl) MenuDetail(ctx context.Context, req *MenuDetailReq, opts ...client.Option) (*Menu, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/auth/admin/menuDetail")
	msg.WithCalleeServiceName(AuthApiServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("AuthApi")
	msg.WithCalleeMethod("MenuDetail")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &Menu{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
