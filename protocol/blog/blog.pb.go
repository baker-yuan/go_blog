// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: blog/blog.proto

package blog

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "trpc.group/trpc/trpc-protocol/pb/go/trpc/proto"
	_ "trpc.group/trpc/trpc-protocol/pb/go/trpc/swagger"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 资源类型
type ResourceType int32

const (
	ResourceType_RT_UNKNOWN ResourceType = 0 // 未知
	ResourceType_TB_ARTICLE ResourceType = 1 // 文章
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RT_UNKNOWN",
		1: "TB_ARTICLE",
	}
	ResourceType_value = map[string]int32{
		"RT_UNKNOWN": 0,
		"TB_ARTICLE": 1,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_blog_blog_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_blog_blog_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{0}
}

// 文章类型枚举定义
type ArticleType int32

const (
	ArticleType_ARTICLE_TYPE_UNKNOWN     ArticleType = 0 // 未知类型
	ArticleType_ARTICLE_TYPE_ORIGINAL    ArticleType = 1 // 原创
	ArticleType_ARTICLE_TYPE_REPOST      ArticleType = 2 // 转载
	ArticleType_ARTICLE_TYPE_TRANSLATION ArticleType = 3 // 翻译
)

// Enum value maps for ArticleType.
var (
	ArticleType_name = map[int32]string{
		0: "ARTICLE_TYPE_UNKNOWN",
		1: "ARTICLE_TYPE_ORIGINAL",
		2: "ARTICLE_TYPE_REPOST",
		3: "ARTICLE_TYPE_TRANSLATION",
	}
	ArticleType_value = map[string]int32{
		"ARTICLE_TYPE_UNKNOWN":     0,
		"ARTICLE_TYPE_ORIGINAL":    1,
		"ARTICLE_TYPE_REPOST":      2,
		"ARTICLE_TYPE_TRANSLATION": 3,
	}
)

func (x ArticleType) Enum() *ArticleType {
	p := new(ArticleType)
	*p = x
	return p
}

func (x ArticleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArticleType) Descriptor() protoreflect.EnumDescriptor {
	return file_blog_blog_proto_enumTypes[1].Descriptor()
}

func (ArticleType) Type() protoreflect.EnumType {
	return &file_blog_blog_proto_enumTypes[1]
}

func (x ArticleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArticleType.Descriptor instead.
func (ArticleType) EnumDescriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{1}
}

// 文章状态枚举定义
type ArticleStatus int32

const (
	ArticleStatus_ARTICLE_STATUS_DRAFT     ArticleStatus = 0 // 草稿
	ArticleStatus_ARTICLE_STATUS_PUBLISHED ArticleStatus = 1 // 已发布
)

// Enum value maps for ArticleStatus.
var (
	ArticleStatus_name = map[int32]string{
		0: "ARTICLE_STATUS_DRAFT",
		1: "ARTICLE_STATUS_PUBLISHED",
	}
	ArticleStatus_value = map[string]int32{
		"ARTICLE_STATUS_DRAFT":     0,
		"ARTICLE_STATUS_PUBLISHED": 1,
	}
)

func (x ArticleStatus) Enum() *ArticleStatus {
	p := new(ArticleStatus)
	*p = x
	return p
}

func (x ArticleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArticleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_blog_blog_proto_enumTypes[2].Descriptor()
}

func (ArticleStatus) Type() protoreflect.EnumType {
	return &file_blog_blog_proto_enumTypes[2]
}

func (x ArticleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArticleStatus.Descriptor instead.
func (ArticleStatus) EnumDescriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{2}
}

// 文章格式枚举定义
type ArticleFormat int32

const (
	ArticleFormat_ARTICLE_FORMAT_UNKNOWN   ArticleFormat = 0 // 未知格式
	ArticleFormat_ARTICLE_FORMAT_MARKDOWN  ArticleFormat = 1 // Markdown格式
	ArticleFormat_ARTICLE_FORMAT_RICH_TEXT ArticleFormat = 2 // 富文本格式
)

// Enum value maps for ArticleFormat.
var (
	ArticleFormat_name = map[int32]string{
		0: "ARTICLE_FORMAT_UNKNOWN",
		1: "ARTICLE_FORMAT_MARKDOWN",
		2: "ARTICLE_FORMAT_RICH_TEXT",
	}
	ArticleFormat_value = map[string]int32{
		"ARTICLE_FORMAT_UNKNOWN":   0,
		"ARTICLE_FORMAT_MARKDOWN":  1,
		"ARTICLE_FORMAT_RICH_TEXT": 2,
	}
)

func (x ArticleFormat) Enum() *ArticleFormat {
	p := new(ArticleFormat)
	*p = x
	return p
}

func (x ArticleFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArticleFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_blog_blog_proto_enumTypes[3].Descriptor()
}

func (ArticleFormat) Type() protoreflect.EnumType {
	return &file_blog_blog_proto_enumTypes[3]
}

func (x ArticleFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArticleFormat.Descriptor instead.
func (ArticleFormat) EnumDescriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{3}
}

// 文章可见性枚举定义
type ArticleVisibility int32

const (
	ArticleVisibility_ARTICLE_VISIBILITY_UNKNOWN            ArticleVisibility = 0 // 未知可见性
	ArticleVisibility_ARTICLE_VISIBILITY_PUBLIC             ArticleVisibility = 1 // 公开
	ArticleVisibility_ARTICLE_VISIBILITY_PRIVATE            ArticleVisibility = 2 // 私密
	ArticleVisibility_ARTICLE_VISIBILITY_PASSWORD_PROTECTED ArticleVisibility = 3 // 密码保护
)

// Enum value maps for ArticleVisibility.
var (
	ArticleVisibility_name = map[int32]string{
		0: "ARTICLE_VISIBILITY_UNKNOWN",
		1: "ARTICLE_VISIBILITY_PUBLIC",
		2: "ARTICLE_VISIBILITY_PRIVATE",
		3: "ARTICLE_VISIBILITY_PASSWORD_PROTECTED",
	}
	ArticleVisibility_value = map[string]int32{
		"ARTICLE_VISIBILITY_UNKNOWN":            0,
		"ARTICLE_VISIBILITY_PUBLIC":             1,
		"ARTICLE_VISIBILITY_PRIVATE":            2,
		"ARTICLE_VISIBILITY_PASSWORD_PROTECTED": 3,
	}
)

func (x ArticleVisibility) Enum() *ArticleVisibility {
	p := new(ArticleVisibility)
	*p = x
	return p
}

func (x ArticleVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArticleVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_blog_blog_proto_enumTypes[4].Descriptor()
}

func (ArticleVisibility) Type() protoreflect.EnumType {
	return &file_blog_blog_proto_enumTypes[4]
}

func (x ArticleVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArticleVisibility.Descriptor instead.
func (ArticleVisibility) EnumDescriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{4}
}

// 友链状态枚举
type FriendLinkStatus int32

const (
	FriendLinkStatus_FL_STATUS_UNKNOWN   FriendLinkStatus = 0 // 未知状态
	FriendLinkStatus_FL_STATUS_PUBLISHED FriendLinkStatus = 1 // 已发布
	FriendLinkStatus_FL_STATUS_OFFLINE   FriendLinkStatus = 2 // 以下线
)

// Enum value maps for FriendLinkStatus.
var (
	FriendLinkStatus_name = map[int32]string{
		0: "FL_STATUS_UNKNOWN",
		1: "FL_STATUS_PUBLISHED",
		2: "FL_STATUS_OFFLINE",
	}
	FriendLinkStatus_value = map[string]int32{
		"FL_STATUS_UNKNOWN":   0,
		"FL_STATUS_PUBLISHED": 1,
		"FL_STATUS_OFFLINE":   2,
	}
)

func (x FriendLinkStatus) Enum() *FriendLinkStatus {
	p := new(FriendLinkStatus)
	*p = x
	return p
}

func (x FriendLinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendLinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_blog_blog_proto_enumTypes[5].Descriptor()
}

func (FriendLinkStatus) Type() protoreflect.EnumType {
	return &file_blog_blog_proto_enumTypes[5]
}

func (x FriendLinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendLinkStatus.Descriptor instead.
func (FriendLinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{5}
}

// CategoryStatus 文章分类可用状态枚举
type CategoryStatus int32

const (
	CategoryStatus_CATEGORY_STATUS_UNAVAILABLE CategoryStatus = 0 // 不可用
	CategoryStatus_CATEGORY_STATUS_AVAILABLE   CategoryStatus = 1 // 可用
)

// Enum value maps for CategoryStatus.
var (
	CategoryStatus_name = map[int32]string{
		0: "CATEGORY_STATUS_UNAVAILABLE",
		1: "CATEGORY_STATUS_AVAILABLE",
	}
	CategoryStatus_value = map[string]int32{
		"CATEGORY_STATUS_UNAVAILABLE": 0,
		"CATEGORY_STATUS_AVAILABLE":   1,
	}
)

func (x CategoryStatus) Enum() *CategoryStatus {
	p := new(CategoryStatus)
	*p = x
	return p
}

func (x CategoryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CategoryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_blog_blog_proto_enumTypes[6].Descriptor()
}

func (CategoryStatus) Type() protoreflect.EnumType {
	return &file_blog_blog_proto_enumTypes[6]
}

func (x CategoryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CategoryStatus.Descriptor instead.
func (CategoryStatus) EnumDescriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{6}
}

// 空响应
type EmptyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRsp) Reset() {
	*x = EmptyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRsp) ProtoMessage() {}

func (x *EmptyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRsp.ProtoReflect.Descriptor instead.
func (*EmptyRsp) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{0}
}

// 添加修改资源返回值
type AddOrUpdateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 资源id
}

func (x *AddOrUpdateRsp) Reset() {
	*x = AddOrUpdateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateRsp) ProtoMessage() {}

func (x *AddOrUpdateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateRsp.ProtoReflect.Descriptor instead.
func (*AddOrUpdateRsp) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{1}
}

func (x *AddOrUpdateRsp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 文章信息定义
type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基本数据
	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // 主键
	CategoryId  uint32 `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`   // 文章分类表ID
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                // 文章标题
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                    // 文章简介
	Content     string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                            // 文章内容
	CoverImage  string `protobuf:"bytes,6,opt,name=cover_image,json=coverImage,proto3" json:"cover_image,omitempty"`    // 文章封面图片
	OriginalUrl string `protobuf:"bytes,7,opt,name=original_url,json=originalUrl,proto3" json:"original_url,omitempty"` // 原文链接
	// 辅助信息
	Password string `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`                   // 密码保护
	Words    uint32 `protobuf:"varint,9,opt,name=words,proto3" json:"words,omitempty"`                        // 文章字数
	ReadTime uint32 `protobuf:"varint,10,opt,name=read_time,json=readTime,proto3" json:"read_time,omitempty"` // 阅读时长（分钟）
	// 类型描述
	Type       ArticleType       `protobuf:"varint,11,opt,name=type,proto3,enum=go_blog.blog.ArticleType" json:"type,omitempty"`                   // 文章类型
	Status     ArticleStatus     `protobuf:"varint,12,opt,name=status,proto3,enum=go_blog.blog.ArticleStatus" json:"status,omitempty"`             // 文章状态
	Format     ArticleFormat     `protobuf:"varint,13,opt,name=format,proto3,enum=go_blog.blog.ArticleFormat" json:"format,omitempty"`             // 文章格式
	Visibility ArticleVisibility `protobuf:"varint,14,opt,name=visibility,proto3,enum=go_blog.blog.ArticleVisibility" json:"visibility,omitempty"` // 文章可见性
	// 标志位
	IsTop            bool `protobuf:"varint,15,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"`                                    // 是否置顶
	IsRecommend      bool `protobuf:"varint,16,opt,name=is_recommend,json=isRecommend,proto3" json:"is_recommend,omitempty"`                  // 是否推荐
	IsAppreciation   bool `protobuf:"varint,17,opt,name=is_appreciation,json=isAppreciation,proto3" json:"is_appreciation,omitempty"`         // 是否开启赞赏
	IsCommentEnabled bool `protobuf:"varint,18,opt,name=is_comment_enabled,json=isCommentEnabled,proto3" json:"is_comment_enabled,omitempty"` // 是否开启评论
	// 公共字段
	IsDeleted  bool   `protobuf:"varint,19,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`    // 是否删除
	CreateTime uint32 `protobuf:"varint,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
	UpdateTime uint32 `protobuf:"varint,21,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` // 更新时间
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{2}
}

func (x *Article) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Article) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Article) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Article) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Article) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Article) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *Article) GetOriginalUrl() string {
	if x != nil {
		return x.OriginalUrl
	}
	return ""
}

func (x *Article) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Article) GetWords() uint32 {
	if x != nil {
		return x.Words
	}
	return 0
}

func (x *Article) GetReadTime() uint32 {
	if x != nil {
		return x.ReadTime
	}
	return 0
}

func (x *Article) GetType() ArticleType {
	if x != nil {
		return x.Type
	}
	return ArticleType_ARTICLE_TYPE_UNKNOWN
}

func (x *Article) GetStatus() ArticleStatus {
	if x != nil {
		return x.Status
	}
	return ArticleStatus_ARTICLE_STATUS_DRAFT
}

func (x *Article) GetFormat() ArticleFormat {
	if x != nil {
		return x.Format
	}
	return ArticleFormat_ARTICLE_FORMAT_UNKNOWN
}

func (x *Article) GetVisibility() ArticleVisibility {
	if x != nil {
		return x.Visibility
	}
	return ArticleVisibility_ARTICLE_VISIBILITY_UNKNOWN
}

func (x *Article) GetIsTop() bool {
	if x != nil {
		return x.IsTop
	}
	return false
}

func (x *Article) GetIsRecommend() bool {
	if x != nil {
		return x.IsRecommend
	}
	return false
}

func (x *Article) GetIsAppreciation() bool {
	if x != nil {
		return x.IsAppreciation
	}
	return false
}

func (x *Article) GetIsCommentEnabled() bool {
	if x != nil {
		return x.IsCommentEnabled
	}
	return false
}

func (x *Article) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Article) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Article) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 文章搜索
type SearchArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search   string `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`                        // 查询条件 {a:?,b:?}
	PageNum  uint32 `protobuf:"varint,100,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    // 分页查询
	PageSize uint32 `protobuf:"varint,101,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 分页查询
}

func (x *SearchArticleReq) Reset() {
	*x = SearchArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArticleReq) ProtoMessage() {}

func (x *SearchArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArticleReq.ProtoReflect.Descriptor instead.
func (*SearchArticleReq) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{3}
}

func (x *SearchArticleReq) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *SearchArticleReq) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *SearchArticleReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SearchArticleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 分页查询
	Data  []*Article `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`    // 文章集合
}

func (x *SearchArticleRsp) Reset() {
	*x = SearchArticleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArticleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArticleRsp) ProtoMessage() {}

func (x *SearchArticleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArticleRsp.ProtoReflect.Descriptor instead.
func (*SearchArticleRsp) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{4}
}

func (x *SearchArticleRsp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchArticleRsp) GetData() []*Article {
	if x != nil {
		return x.Data
	}
	return nil
}

// 文章详情
type ArticleDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 编号
}

func (x *ArticleDetailReq) Reset() {
	*x = ArticleDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleDetailReq) ProtoMessage() {}

func (x *ArticleDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleDetailReq.ProtoReflect.Descriptor instead.
func (*ArticleDetailReq) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{5}
}

func (x *ArticleDetailReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 添加修改文章
type AddOrUpdateArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基本数据
	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // 主键
	CategoryId  uint32 `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`   // 文章分类表ID
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                // 文章标题
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                    // 文章简介
	Content     string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                            // 文章内容
	CoverImage  string `protobuf:"bytes,6,opt,name=cover_image,json=coverImage,proto3" json:"cover_image,omitempty"`    // 文章封面图片
	OriginalUrl string `protobuf:"bytes,7,opt,name=original_url,json=originalUrl,proto3" json:"original_url,omitempty"` // 原文链接
	// 辅助信息
	Password string `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"` // 密码保护
	// 类型描述
	Type       ArticleType       `protobuf:"varint,11,opt,name=type,proto3,enum=go_blog.blog.ArticleType" json:"type,omitempty"`                   // 文章类型
	Status     ArticleStatus     `protobuf:"varint,12,opt,name=status,proto3,enum=go_blog.blog.ArticleStatus" json:"status,omitempty"`             // 文章状态
	Format     ArticleFormat     `protobuf:"varint,13,opt,name=format,proto3,enum=go_blog.blog.ArticleFormat" json:"format,omitempty"`             // 文章格式
	Visibility ArticleVisibility `protobuf:"varint,14,opt,name=visibility,proto3,enum=go_blog.blog.ArticleVisibility" json:"visibility,omitempty"` // 文章可见性
	// 标志位
	IsTop            bool `protobuf:"varint,15,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"`                                    // 是否置顶
	IsRecommend      bool `protobuf:"varint,16,opt,name=is_recommend,json=isRecommend,proto3" json:"is_recommend,omitempty"`                  // 是否推荐
	IsAppreciation   bool `protobuf:"varint,17,opt,name=is_appreciation,json=isAppreciation,proto3" json:"is_appreciation,omitempty"`         // 是否开启赞赏
	IsCommentEnabled bool `protobuf:"varint,18,opt,name=is_comment_enabled,json=isCommentEnabled,proto3" json:"is_comment_enabled,omitempty"` // 是否开启评论
}

func (x *AddOrUpdateArticleReq) Reset() {
	*x = AddOrUpdateArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateArticleReq) ProtoMessage() {}

func (x *AddOrUpdateArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateArticleReq.ProtoReflect.Descriptor instead.
func (*AddOrUpdateArticleReq) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{6}
}

func (x *AddOrUpdateArticleReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddOrUpdateArticleReq) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *AddOrUpdateArticleReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddOrUpdateArticleReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddOrUpdateArticleReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddOrUpdateArticleReq) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *AddOrUpdateArticleReq) GetOriginalUrl() string {
	if x != nil {
		return x.OriginalUrl
	}
	return ""
}

func (x *AddOrUpdateArticleReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddOrUpdateArticleReq) GetType() ArticleType {
	if x != nil {
		return x.Type
	}
	return ArticleType_ARTICLE_TYPE_UNKNOWN
}

func (x *AddOrUpdateArticleReq) GetStatus() ArticleStatus {
	if x != nil {
		return x.Status
	}
	return ArticleStatus_ARTICLE_STATUS_DRAFT
}

func (x *AddOrUpdateArticleReq) GetFormat() ArticleFormat {
	if x != nil {
		return x.Format
	}
	return ArticleFormat_ARTICLE_FORMAT_UNKNOWN
}

func (x *AddOrUpdateArticleReq) GetVisibility() ArticleVisibility {
	if x != nil {
		return x.Visibility
	}
	return ArticleVisibility_ARTICLE_VISIBILITY_UNKNOWN
}

func (x *AddOrUpdateArticleReq) GetIsTop() bool {
	if x != nil {
		return x.IsTop
	}
	return false
}

func (x *AddOrUpdateArticleReq) GetIsRecommend() bool {
	if x != nil {
		return x.IsRecommend
	}
	return false
}

func (x *AddOrUpdateArticleReq) GetIsAppreciation() bool {
	if x != nil {
		return x.IsAppreciation
	}
	return false
}

func (x *AddOrUpdateArticleReq) GetIsCommentEnabled() bool {
	if x != nil {
		return x.IsCommentEnabled
	}
	return false
}

// 删除文章
type DeleteArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 编号
}

func (x *DeleteArticleReq) Reset() {
	*x = DeleteArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArticleReq) ProtoMessage() {}

func (x *DeleteArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArticleReq.ProtoReflect.Descriptor instead.
func (*DeleteArticleReq) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteArticleReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Tag 文章标签
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 主键
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                // 标签名
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                  // 标签描述
	Color       string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`                              // 标签颜色
	CreateTime  uint32 `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
	UpdateTime  uint32 `protobuf:"varint,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` // 修改时间
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{8}
}

func (x *Tag) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tag) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Tag) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Tag) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 页面信息定义
type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 页面id
	PageName   string `protobuf:"bytes,2,opt,name=page_name,json=pageName,proto3" json:"page_name,omitempty"`        // 页面名
	PageLabel  string `protobuf:"bytes,3,opt,name=page_label,json=pageLabel,proto3" json:"page_label,omitempty"`     // 页面标签
	PageCover  string `protobuf:"bytes,4,opt,name=page_cover,json=pageCover,proto3" json:"page_cover,omitempty"`     // 页面封面
	CreateTime uint32 `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
	UpdateTime uint32 `protobuf:"varint,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` // 更新时间
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{9}
}

func (x *Page) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Page) GetPageName() string {
	if x != nil {
		return x.PageName
	}
	return ""
}

func (x *Page) GetPageLabel() string {
	if x != nil {
		return x.PageLabel
	}
	return ""
}

func (x *Page) GetPageCover() string {
	if x != nil {
		return x.PageCover
	}
	return ""
}

func (x *Page) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Page) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 动态信息定义
type Moment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      // 主键
	Content     string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                             // 动态内容
	Likes       uint32 `protobuf:"varint,3,opt,name=likes,proto3" json:"likes,omitempty"`                                // 点赞数量
	IsPublished bool   `protobuf:"varint,4,opt,name=is_published,json=isPublished,proto3" json:"is_published,omitempty"` // 是否公开
	IsDeleted   bool   `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`       // 是否删除
	CreateTime  uint32 `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`    // 创建时间
	UpdateTime  uint32 `protobuf:"varint,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`    // 更新时间
}

func (x *Moment) Reset() {
	*x = Moment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Moment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Moment) ProtoMessage() {}

func (x *Moment) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Moment.ProtoReflect.Descriptor instead.
func (*Moment) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{10}
}

func (x *Moment) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Moment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Moment) GetLikes() uint32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *Moment) GetIsPublished() bool {
	if x != nil {
		return x.IsPublished
	}
	return false
}

func (x *Moment) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Moment) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Moment) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// FriendLink 友链信息定义
type FriendLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                            // 主键
	LinkName    string           `protobuf:"bytes,2,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`                 // 链接名
	LinkAvatar  string           `protobuf:"bytes,3,opt,name=link_avatar,json=linkAvatar,proto3" json:"link_avatar,omitempty"`           // 链接头像
	LinkAddress string           `protobuf:"bytes,4,opt,name=link_address,json=linkAddress,proto3" json:"link_address,omitempty"`        // 链接地址
	LinkIntro   string           `protobuf:"bytes,5,opt,name=link_intro,json=linkIntro,proto3" json:"link_intro,omitempty"`              // 链接介绍
	Status      FriendLinkStatus `protobuf:"varint,6,opt,name=status,proto3,enum=go_blog.blog.FriendLinkStatus" json:"status,omitempty"` // 友链状态 1-已发布 2-以下线
	Sort        uint32           `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                        // 友链排序
	IsDeleted   bool             `protobuf:"varint,8,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`             // 是否删除
	CreateTime  uint32           `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`          // 创建时间
	UpdateTime  uint32           `protobuf:"varint,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`         // 更新时间
}

func (x *FriendLink) Reset() {
	*x = FriendLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendLink) ProtoMessage() {}

func (x *FriendLink) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendLink.ProtoReflect.Descriptor instead.
func (*FriendLink) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{11}
}

func (x *FriendLink) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FriendLink) GetLinkName() string {
	if x != nil {
		return x.LinkName
	}
	return ""
}

func (x *FriendLink) GetLinkAvatar() string {
	if x != nil {
		return x.LinkAvatar
	}
	return ""
}

func (x *FriendLink) GetLinkAddress() string {
	if x != nil {
		return x.LinkAddress
	}
	return ""
}

func (x *FriendLink) GetLinkIntro() string {
	if x != nil {
		return x.LinkIntro
	}
	return ""
}

func (x *FriendLink) GetStatus() FriendLinkStatus {
	if x != nil {
		return x.Status
	}
	return FriendLinkStatus_FL_STATUS_UNKNOWN
}

func (x *FriendLink) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *FriendLink) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *FriendLink) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *FriendLink) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// Config 网站配置信息定义
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 主键
	Code       string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`                                // 唯一编码
	Desc       string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`                                // 描述信息
	Config     string `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`                            // 配置信息
	CreateTime uint32 `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
	UpdateTime uint32 `protobuf:"varint,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` // 更新时间
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{12}
}

func (x *Config) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Config) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Config) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Config) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *Config) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Config) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// Category 文章分类信息定义
type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                // 主键
	Name        string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                             // 文章类型名
	Description string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                               // 类型介绍
	Sort        int32          `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`                                            // 排序
	Available   CategoryStatus `protobuf:"varint,5,opt,name=available,proto3,enum=go_blog.blog.CategoryStatus" json:"available,omitempty"` // 是否可用
	CreateTime  uint32         `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`              // 创建时间
	UpdateTime  uint32         `protobuf:"varint,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`              // 更新时间
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{13}
}

func (x *Category) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Category) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Category) GetAvailable() CategoryStatus {
	if x != nil {
		return x.Available
	}
	return CategoryStatus_CATEGORY_STATUS_UNAVAILABLE
}

func (x *Category) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Category) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// ArticleTag 文章标签关联信息定义
type ArticleTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 主键
	TagId      uint32 `protobuf:"varint,2,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`                // 标签表ID
	ArticleId  uint32 `protobuf:"varint,3,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`    // 文章ID
	CreateTime uint32 `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
	UpdateTime uint32 `protobuf:"varint,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` // 更新时间
}

func (x *ArticleTag) Reset() {
	*x = ArticleTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_blog_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleTag) ProtoMessage() {}

func (x *ArticleTag) ProtoReflect() protoreflect.Message {
	mi := &file_blog_blog_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleTag.ProtoReflect.Descriptor instead.
func (*ArticleTag) Descriptor() ([]byte, []int) {
	return file_blog_blog_proto_rawDescGZIP(), []int{14}
}

func (x *ArticleTag) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ArticleTag) GetTagId() uint32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *ArticleTag) GetArticleId() uint32 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

func (x *ArticleTag) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ArticleTag) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

var File_blog_blog_proto protoreflect.FileDescriptor

var file_blog_blog_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x67, 0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x70, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x77,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x22,
	0x20, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xeb, 0x05, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x0a,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x54, 0x6f, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x73, 0x41, 0x70, 0x70, 0x72, 0x65, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x74, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x53, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x10, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbd, 0x05, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x82, 0x01, 0x06, 0x18, 0x01, 0x18, 0x02, 0x18, 0x03, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x18, 0x00, 0x18, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x18, 0x01, 0x18, 0x02, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0c, 0xfa, 0x42,
	0x09, 0x82, 0x01, 0x06, 0x18, 0x01, 0x18, 0x02, 0x18, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x65, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x70, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x04, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xcc, 0x01, 0x0a, 0x06, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xc9, 0x02, 0x0a, 0x0a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x36,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x3a, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x94, 0x01,
	0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x2a, 0x2e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x42, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43,
	0x4c, 0x45, 0x10, 0x01, 0x2a, 0x79, 0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x54, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a,
	0x47, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x52,
	0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x66, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x52, 0x54,
	0x49, 0x43, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02,
	0x2a, 0x9d, 0x01, 0x0a, 0x11, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c,
	0x45, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c,
	0x45, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0x59, 0x0a, 0x10, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x0e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x32, 0xc0, 0x03,
	0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x67, 0x41, 0x70, 0x69, 0x12, 0x6e, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x5f,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x5f,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x22, 0x1d, 0x8a, 0xb5, 0x18, 0x19,
	0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x76, 0x0a, 0x12, 0x41, 0x64, 0x64,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12,
	0x23, 0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41,
	0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x73, 0x70, 0x22, 0x1d, 0x8a, 0xb5, 0x18, 0x19, 0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x66, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x22, 0x1d, 0x8a, 0xb5, 0x18, 0x19,
	0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x65, 0x0a, 0x0d, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x5f,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x67, 0x6f, 0x5f,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x22, 0x1d, 0x8a, 0xb5, 0x18, 0x19, 0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x61, 0x6b, 0x65, 0x72, 0x2d, 0x79, 0x75, 0x61, 0x6e, 0x2f, 0x67, 0x6f, 0x2d, 0x62, 0x6c, 0x6f,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blog_blog_proto_rawDescOnce sync.Once
	file_blog_blog_proto_rawDescData = file_blog_blog_proto_rawDesc
)

func file_blog_blog_proto_rawDescGZIP() []byte {
	file_blog_blog_proto_rawDescOnce.Do(func() {
		file_blog_blog_proto_rawDescData = protoimpl.X.CompressGZIP(file_blog_blog_proto_rawDescData)
	})
	return file_blog_blog_proto_rawDescData
}

var file_blog_blog_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_blog_blog_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_blog_blog_proto_goTypes = []interface{}{
	(ResourceType)(0),             // 0: go_blog.blog.ResourceType
	(ArticleType)(0),              // 1: go_blog.blog.ArticleType
	(ArticleStatus)(0),            // 2: go_blog.blog.ArticleStatus
	(ArticleFormat)(0),            // 3: go_blog.blog.ArticleFormat
	(ArticleVisibility)(0),        // 4: go_blog.blog.ArticleVisibility
	(FriendLinkStatus)(0),         // 5: go_blog.blog.FriendLinkStatus
	(CategoryStatus)(0),           // 6: go_blog.blog.CategoryStatus
	(*EmptyRsp)(nil),              // 7: go_blog.blog.EmptyRsp
	(*AddOrUpdateRsp)(nil),        // 8: go_blog.blog.AddOrUpdateRsp
	(*Article)(nil),               // 9: go_blog.blog.Article
	(*SearchArticleReq)(nil),      // 10: go_blog.blog.SearchArticleReq
	(*SearchArticleRsp)(nil),      // 11: go_blog.blog.SearchArticleRsp
	(*ArticleDetailReq)(nil),      // 12: go_blog.blog.ArticleDetailReq
	(*AddOrUpdateArticleReq)(nil), // 13: go_blog.blog.AddOrUpdateArticleReq
	(*DeleteArticleReq)(nil),      // 14: go_blog.blog.DeleteArticleReq
	(*Tag)(nil),                   // 15: go_blog.blog.Tag
	(*Page)(nil),                  // 16: go_blog.blog.Page
	(*Moment)(nil),                // 17: go_blog.blog.Moment
	(*FriendLink)(nil),            // 18: go_blog.blog.FriendLink
	(*Config)(nil),                // 19: go_blog.blog.Config
	(*Category)(nil),              // 20: go_blog.blog.Category
	(*ArticleTag)(nil),            // 21: go_blog.blog.ArticleTag
}
var file_blog_blog_proto_depIdxs = []int32{
	1,  // 0: go_blog.blog.Article.type:type_name -> go_blog.blog.ArticleType
	2,  // 1: go_blog.blog.Article.status:type_name -> go_blog.blog.ArticleStatus
	3,  // 2: go_blog.blog.Article.format:type_name -> go_blog.blog.ArticleFormat
	4,  // 3: go_blog.blog.Article.visibility:type_name -> go_blog.blog.ArticleVisibility
	9,  // 4: go_blog.blog.SearchArticleRsp.data:type_name -> go_blog.blog.Article
	1,  // 5: go_blog.blog.AddOrUpdateArticleReq.type:type_name -> go_blog.blog.ArticleType
	2,  // 6: go_blog.blog.AddOrUpdateArticleReq.status:type_name -> go_blog.blog.ArticleStatus
	3,  // 7: go_blog.blog.AddOrUpdateArticleReq.format:type_name -> go_blog.blog.ArticleFormat
	4,  // 8: go_blog.blog.AddOrUpdateArticleReq.visibility:type_name -> go_blog.blog.ArticleVisibility
	5,  // 9: go_blog.blog.FriendLink.status:type_name -> go_blog.blog.FriendLinkStatus
	6,  // 10: go_blog.blog.Category.available:type_name -> go_blog.blog.CategoryStatus
	10, // 11: go_blog.blog.BlogApi.SearchArticle:input_type -> go_blog.blog.SearchArticleReq
	13, // 12: go_blog.blog.BlogApi.AddOrUpdateArticle:input_type -> go_blog.blog.AddOrUpdateArticleReq
	14, // 13: go_blog.blog.BlogApi.DeleteArticle:input_type -> go_blog.blog.DeleteArticleReq
	12, // 14: go_blog.blog.BlogApi.ArticleDetail:input_type -> go_blog.blog.ArticleDetailReq
	11, // 15: go_blog.blog.BlogApi.SearchArticle:output_type -> go_blog.blog.SearchArticleRsp
	8,  // 16: go_blog.blog.BlogApi.AddOrUpdateArticle:output_type -> go_blog.blog.AddOrUpdateRsp
	7,  // 17: go_blog.blog.BlogApi.DeleteArticle:output_type -> go_blog.blog.EmptyRsp
	9,  // 18: go_blog.blog.BlogApi.ArticleDetail:output_type -> go_blog.blog.Article
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_blog_blog_proto_init() }
func file_blog_blog_proto_init() {
	if File_blog_blog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blog_blog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArticleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdateArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Moment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_blog_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blog_blog_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blog_blog_proto_goTypes,
		DependencyIndexes: file_blog_blog_proto_depIdxs,
		EnumInfos:         file_blog_blog_proto_enumTypes,
		MessageInfos:      file_blog_blog_proto_msgTypes,
	}.Build()
	File_blog_blog_proto = out.File
	file_blog_blog_proto_rawDesc = nil
	file_blog_blog_proto_goTypes = nil
	file_blog_blog_proto_depIdxs = nil
}
