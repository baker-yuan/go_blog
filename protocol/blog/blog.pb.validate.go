// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: blog/blog.proto

package blog

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmptyRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyRspMultiError, or nil
// if none found.
func (m *EmptyRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyRspMultiError(errors)
	}

	return nil
}

// EmptyRspMultiError is an error wrapping multiple validation errors returned
// by EmptyRsp.ValidateAll() if the designated constraints aren't met.
type EmptyRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyRspMultiError) AllErrors() []error { return m }

// EmptyRspValidationError is the validation error returned by
// EmptyRsp.Validate if the designated constraints aren't met.
type EmptyRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRspValidationError) ErrorName() string { return "EmptyRspValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRspValidationError{}

// Validate checks the field values on AddOrUpdateRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddOrUpdateRspMultiError,
// or nil if none found.
func (m *AddOrUpdateRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddOrUpdateRspMultiError(errors)
	}

	return nil
}

// AddOrUpdateRspMultiError is an error wrapping multiple validation errors
// returned by AddOrUpdateRsp.ValidateAll() if the designated constraints
// aren't met.
type AddOrUpdateRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateRspMultiError) AllErrors() []error { return m }

// AddOrUpdateRspValidationError is the validation error returned by
// AddOrUpdateRsp.Validate if the designated constraints aren't met.
type AddOrUpdateRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateRspValidationError) ErrorName() string { return "AddOrUpdateRspValidationError" }

// Error satisfies the builtin error interface
func (e AddOrUpdateRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateRspValidationError{}

// Validate checks the field values on Article with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Article with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ArticleMultiError, or nil if none found.
func (m *Article) ValidateAll() error {
	return m.validate(true)
}

func (m *Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CategoryId

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Content

	// no validation rules for CoverImage

	// no validation rules for OriginalUrl

	// no validation rules for Password

	// no validation rules for Words

	// no validation rules for ReadTime

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Format

	// no validation rules for Visibility

	// no validation rules for IsTop

	// no validation rules for IsRecommend

	// no validation rules for IsAppreciation

	// no validation rules for IsCommentEnabled

	// no validation rules for IsDeleted

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return ArticleMultiError(errors)
	}

	return nil
}

// ArticleMultiError is an error wrapping multiple validation errors returned
// by Article.ValidateAll() if the designated constraints aren't met.
type ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleMultiError) AllErrors() []error { return m }

// ArticleValidationError is the validation error returned by Article.Validate
// if the designated constraints aren't met.
type ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleValidationError) ErrorName() string { return "ArticleValidationError" }

// Error satisfies the builtin error interface
func (e ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleValidationError{}

// Validate checks the field values on SearchArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchArticleReqMultiError, or nil if none found.
func (m *SearchArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	if m.GetPageNum() <= 0 {
		err := SearchArticleReqValidationError{
			field:  "PageNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := SearchArticleReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchArticleReqMultiError(errors)
	}

	return nil
}

// SearchArticleReqMultiError is an error wrapping multiple validation errors
// returned by SearchArticleReq.ValidateAll() if the designated constraints
// aren't met.
type SearchArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchArticleReqMultiError) AllErrors() []error { return m }

// SearchArticleReqValidationError is the validation error returned by
// SearchArticleReq.Validate if the designated constraints aren't met.
type SearchArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchArticleReqValidationError) ErrorName() string { return "SearchArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchArticleReqValidationError{}

// Validate checks the field values on SearchArticleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchArticleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchArticleRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchArticleRspMultiError, or nil if none found.
func (m *SearchArticleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchArticleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchArticleRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchArticleRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchArticleRspValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchArticleRspMultiError(errors)
	}

	return nil
}

// SearchArticleRspMultiError is an error wrapping multiple validation errors
// returned by SearchArticleRsp.ValidateAll() if the designated constraints
// aren't met.
type SearchArticleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchArticleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchArticleRspMultiError) AllErrors() []error { return m }

// SearchArticleRspValidationError is the validation error returned by
// SearchArticleRsp.Validate if the designated constraints aren't met.
type SearchArticleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchArticleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchArticleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchArticleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchArticleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchArticleRspValidationError) ErrorName() string { return "SearchArticleRspValidationError" }

// Error satisfies the builtin error interface
func (e SearchArticleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchArticleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchArticleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchArticleRspValidationError{}

// Validate checks the field values on ArticleDetailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ArticleDetailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleDetailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleDetailReqMultiError, or nil if none found.
func (m *ArticleDetailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleDetailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ArticleDetailReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ArticleDetailReqMultiError(errors)
	}

	return nil
}

// ArticleDetailReqMultiError is an error wrapping multiple validation errors
// returned by ArticleDetailReq.ValidateAll() if the designated constraints
// aren't met.
type ArticleDetailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleDetailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleDetailReqMultiError) AllErrors() []error { return m }

// ArticleDetailReqValidationError is the validation error returned by
// ArticleDetailReq.Validate if the designated constraints aren't met.
type ArticleDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleDetailReqValidationError) ErrorName() string { return "ArticleDetailReqValidationError" }

// Error satisfies the builtin error interface
func (e ArticleDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleDetailReqValidationError{}

// Validate checks the field values on AddOrUpdateArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrUpdateArticleReqMultiError, or nil if none found.
func (m *AddOrUpdateArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetCategoryId() <= 0 {
		err := AddOrUpdateArticleReqValidationError{
			field:  "CategoryId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := AddOrUpdateArticleReqValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := AddOrUpdateArticleReqValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := AddOrUpdateArticleReqValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CoverImage

	// no validation rules for OriginalUrl

	// no validation rules for Password

	if _, ok := _AddOrUpdateArticleReq_Type_InLookup[m.GetType()]; !ok {
		err := AddOrUpdateArticleReqValidationError{
			field:  "Type",
			reason: "value must be in list [ARTICLE_TYPE_ORIGINAL ARTICLE_TYPE_REPOST ARTICLE_TYPE_TRANSLATION]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateArticleReq_Status_InLookup[m.GetStatus()]; !ok {
		err := AddOrUpdateArticleReqValidationError{
			field:  "Status",
			reason: "value must be in list [ARTICLE_STATUS_DRAFT ARTICLE_STATUS_PUBLISHED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateArticleReq_Format_InLookup[m.GetFormat()]; !ok {
		err := AddOrUpdateArticleReqValidationError{
			field:  "Format",
			reason: "value must be in list [ARTICLE_FORMAT_MARKDOWN ARTICLE_FORMAT_RICH_TEXT]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateArticleReq_Visibility_InLookup[m.GetVisibility()]; !ok {
		err := AddOrUpdateArticleReqValidationError{
			field:  "Visibility",
			reason: "value must be in list [ARTICLE_VISIBILITY_PUBLIC ARTICLE_VISIBILITY_PRIVATE ARTICLE_VISIBILITY_PASSWORD_PROTECTED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsTop

	// no validation rules for IsRecommend

	// no validation rules for IsAppreciation

	// no validation rules for IsCommentEnabled

	if len(errors) > 0 {
		return AddOrUpdateArticleReqMultiError(errors)
	}

	return nil
}

// AddOrUpdateArticleReqMultiError is an error wrapping multiple validation
// errors returned by AddOrUpdateArticleReq.ValidateAll() if the designated
// constraints aren't met.
type AddOrUpdateArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateArticleReqMultiError) AllErrors() []error { return m }

// AddOrUpdateArticleReqValidationError is the validation error returned by
// AddOrUpdateArticleReq.Validate if the designated constraints aren't met.
type AddOrUpdateArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateArticleReqValidationError) ErrorName() string {
	return "AddOrUpdateArticleReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateArticleReqValidationError{}

var _AddOrUpdateArticleReq_Type_InLookup = map[ArticleType]struct{}{
	1: {},
	2: {},
	3: {},
}

var _AddOrUpdateArticleReq_Status_InLookup = map[ArticleStatus]struct{}{
	0: {},
	1: {},
}

var _AddOrUpdateArticleReq_Format_InLookup = map[ArticleFormat]struct{}{
	1: {},
	2: {},
}

var _AddOrUpdateArticleReq_Visibility_InLookup = map[ArticleVisibility]struct{}{
	1: {},
	2: {},
	3: {},
}

// Validate checks the field values on DeleteArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArticleReqMultiError, or nil if none found.
func (m *DeleteArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteArticleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteArticleReqMultiError(errors)
	}

	return nil
}

// DeleteArticleReqMultiError is an error wrapping multiple validation errors
// returned by DeleteArticleReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleReqMultiError) AllErrors() []error { return m }

// DeleteArticleReqValidationError is the validation error returned by
// DeleteArticleReq.Validate if the designated constraints aren't met.
type DeleteArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleReqValidationError) ErrorName() string { return "DeleteArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleReqValidationError{}
