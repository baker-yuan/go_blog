// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: template/template.proto

package template

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmptyRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyRspMultiError, or nil
// if none found.
func (m *EmptyRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyRspMultiError(errors)
	}

	return nil
}

// EmptyRspMultiError is an error wrapping multiple validation errors returned
// by EmptyRsp.ValidateAll() if the designated constraints aren't met.
type EmptyRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyRspMultiError) AllErrors() []error { return m }

// EmptyRspValidationError is the validation error returned by
// EmptyRsp.Validate if the designated constraints aren't met.
type EmptyRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRspValidationError) ErrorName() string { return "EmptyRspValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRspValidationError{}

// Validate checks the field values on AddOrUpdateRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddOrUpdateRspMultiError,
// or nil if none found.
func (m *AddOrUpdateRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddOrUpdateRspMultiError(errors)
	}

	return nil
}

// AddOrUpdateRspMultiError is an error wrapping multiple validation errors
// returned by AddOrUpdateRsp.ValidateAll() if the designated constraints
// aren't met.
type AddOrUpdateRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateRspMultiError) AllErrors() []error { return m }

// AddOrUpdateRspValidationError is the validation error returned by
// AddOrUpdateRsp.Validate if the designated constraints aren't met.
type AddOrUpdateRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateRspValidationError) ErrorName() string { return "AddOrUpdateRspValidationError" }

// Error satisfies the builtin error interface
func (e AddOrUpdateRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateRspValidationError{}

// Validate checks the field values on FriendLink with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendLink) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendLink with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendLinkMultiError, or
// nil if none found.
func (m *FriendLink) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendLink) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for LinkName

	// no validation rules for LinkAvatar

	// no validation rules for LinkAddress

	// no validation rules for LinkIntro

	// no validation rules for Sort

	// no validation rules for Status

	// no validation rules for IsDeleted

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return FriendLinkMultiError(errors)
	}

	return nil
}

// FriendLinkMultiError is an error wrapping multiple validation errors
// returned by FriendLink.ValidateAll() if the designated constraints aren't met.
type FriendLinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendLinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendLinkMultiError) AllErrors() []error { return m }

// FriendLinkValidationError is the validation error returned by
// FriendLink.Validate if the designated constraints aren't met.
type FriendLinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendLinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendLinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendLinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendLinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendLinkValidationError) ErrorName() string { return "FriendLinkValidationError" }

// Error satisfies the builtin error interface
func (e FriendLinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendLinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendLinkValidationError{}

// Validate checks the field values on SearchFriendLinkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchFriendLinkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchFriendLinkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchFriendLinkReqMultiError, or nil if none found.
func (m *SearchFriendLinkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchFriendLinkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNum() <= 0 {
		err := SearchFriendLinkReqValidationError{
			field:  "PageNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := SearchFriendLinkReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchFriendLinkReqMultiError(errors)
	}

	return nil
}

// SearchFriendLinkReqMultiError is an error wrapping multiple validation
// errors returned by SearchFriendLinkReq.ValidateAll() if the designated
// constraints aren't met.
type SearchFriendLinkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchFriendLinkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchFriendLinkReqMultiError) AllErrors() []error { return m }

// SearchFriendLinkReqValidationError is the validation error returned by
// SearchFriendLinkReq.Validate if the designated constraints aren't met.
type SearchFriendLinkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchFriendLinkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchFriendLinkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchFriendLinkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchFriendLinkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchFriendLinkReqValidationError) ErrorName() string {
	return "SearchFriendLinkReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchFriendLinkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchFriendLinkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchFriendLinkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchFriendLinkReqValidationError{}

// Validate checks the field values on SearchFriendLinkRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchFriendLinkRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchFriendLinkRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchFriendLinkRspMultiError, or nil if none found.
func (m *SearchFriendLinkRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchFriendLinkRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchFriendLinkRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchFriendLinkRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchFriendLinkRspValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchFriendLinkRspMultiError(errors)
	}

	return nil
}

// SearchFriendLinkRspMultiError is an error wrapping multiple validation
// errors returned by SearchFriendLinkRsp.ValidateAll() if the designated
// constraints aren't met.
type SearchFriendLinkRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchFriendLinkRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchFriendLinkRspMultiError) AllErrors() []error { return m }

// SearchFriendLinkRspValidationError is the validation error returned by
// SearchFriendLinkRsp.Validate if the designated constraints aren't met.
type SearchFriendLinkRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchFriendLinkRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchFriendLinkRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchFriendLinkRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchFriendLinkRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchFriendLinkRspValidationError) ErrorName() string {
	return "SearchFriendLinkRspValidationError"
}

// Error satisfies the builtin error interface
func (e SearchFriendLinkRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchFriendLinkRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchFriendLinkRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchFriendLinkRspValidationError{}

// Validate checks the field values on FriendLinkDetailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FriendLinkDetailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendLinkDetailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FriendLinkDetailReqMultiError, or nil if none found.
func (m *FriendLinkDetailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendLinkDetailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FriendLinkDetailReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FriendLinkDetailReqMultiError(errors)
	}

	return nil
}

// FriendLinkDetailReqMultiError is an error wrapping multiple validation
// errors returned by FriendLinkDetailReq.ValidateAll() if the designated
// constraints aren't met.
type FriendLinkDetailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendLinkDetailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendLinkDetailReqMultiError) AllErrors() []error { return m }

// FriendLinkDetailReqValidationError is the validation error returned by
// FriendLinkDetailReq.Validate if the designated constraints aren't met.
type FriendLinkDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendLinkDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendLinkDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendLinkDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendLinkDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendLinkDetailReqValidationError) ErrorName() string {
	return "FriendLinkDetailReqValidationError"
}

// Error satisfies the builtin error interface
func (e FriendLinkDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendLinkDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendLinkDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendLinkDetailReqValidationError{}

// Validate checks the field values on AddOrUpdateFriendLinkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateFriendLinkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateFriendLinkReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrUpdateFriendLinkReqMultiError, or nil if none found.
func (m *AddOrUpdateFriendLinkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateFriendLinkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOrUpdateFriendLinkReqMultiError(errors)
	}

	return nil
}

// AddOrUpdateFriendLinkReqMultiError is an error wrapping multiple validation
// errors returned by AddOrUpdateFriendLinkReq.ValidateAll() if the designated
// constraints aren't met.
type AddOrUpdateFriendLinkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateFriendLinkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateFriendLinkReqMultiError) AllErrors() []error { return m }

// AddOrUpdateFriendLinkReqValidationError is the validation error returned by
// AddOrUpdateFriendLinkReq.Validate if the designated constraints aren't met.
type AddOrUpdateFriendLinkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateFriendLinkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateFriendLinkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateFriendLinkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateFriendLinkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateFriendLinkReqValidationError) ErrorName() string {
	return "AddOrUpdateFriendLinkReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateFriendLinkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateFriendLinkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateFriendLinkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateFriendLinkReqValidationError{}

// Validate checks the field values on DeleteFriendLinkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendLinkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendLinkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendLinkReqMultiError, or nil if none found.
func (m *DeleteFriendLinkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendLinkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteFriendLinkReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFriendLinkReqMultiError(errors)
	}

	return nil
}

// DeleteFriendLinkReqMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendLinkReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteFriendLinkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendLinkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendLinkReqMultiError) AllErrors() []error { return m }

// DeleteFriendLinkReqValidationError is the validation error returned by
// DeleteFriendLinkReq.Validate if the designated constraints aren't met.
type DeleteFriendLinkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendLinkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendLinkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendLinkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendLinkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendLinkReqValidationError) ErrorName() string {
	return "DeleteFriendLinkReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendLinkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendLinkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendLinkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendLinkReqValidationError{}
