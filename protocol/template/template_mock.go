// Code generated by MockGen. DO NOT EDIT.
// Source: template.trpc.go

// Package template is a generated GoMock package.
package template

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockTemplateApiService is a mock of TemplateApiService interface.
type MockTemplateApiService struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateApiServiceMockRecorder
}

// MockTemplateApiServiceMockRecorder is the mock recorder for MockTemplateApiService.
type MockTemplateApiServiceMockRecorder struct {
	mock *MockTemplateApiService
}

// NewMockTemplateApiService creates a new mock instance.
func NewMockTemplateApiService(ctrl *gomock.Controller) *MockTemplateApiService {
	mock := &MockTemplateApiService{ctrl: ctrl}
	mock.recorder = &MockTemplateApiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateApiService) EXPECT() *MockTemplateApiServiceMockRecorder {
	return m.recorder
}

// AddOrUpdateFriendLink mocks base method.
func (m *MockTemplateApiService) AddOrUpdateFriendLink(ctx context.Context, req *AddOrUpdateFriendLinkReq) (*AddOrUpdateRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateFriendLink", ctx, req)
	ret0, _ := ret[0].(*AddOrUpdateRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrUpdateFriendLink indicates an expected call of AddOrUpdateFriendLink.
func (mr *MockTemplateApiServiceMockRecorder) AddOrUpdateFriendLink(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateFriendLink", reflect.TypeOf((*MockTemplateApiService)(nil).AddOrUpdateFriendLink), ctx, req)
}

// DeleteFriendLink mocks base method.
func (m *MockTemplateApiService) DeleteFriendLink(ctx context.Context, req *DeleteFriendLinkReq) (*EmptyRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriendLink", ctx, req)
	ret0, _ := ret[0].(*EmptyRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFriendLink indicates an expected call of DeleteFriendLink.
func (mr *MockTemplateApiServiceMockRecorder) DeleteFriendLink(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriendLink", reflect.TypeOf((*MockTemplateApiService)(nil).DeleteFriendLink), ctx, req)
}

// FriendLinkDetail mocks base method.
func (m *MockTemplateApiService) FriendLinkDetail(ctx context.Context, req *FriendLinkDetailReq) (*FriendLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FriendLinkDetail", ctx, req)
	ret0, _ := ret[0].(*FriendLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FriendLinkDetail indicates an expected call of FriendLinkDetail.
func (mr *MockTemplateApiServiceMockRecorder) FriendLinkDetail(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FriendLinkDetail", reflect.TypeOf((*MockTemplateApiService)(nil).FriendLinkDetail), ctx, req)
}

// SearchFriendLink mocks base method.
func (m *MockTemplateApiService) SearchFriendLink(ctx context.Context, req *SearchFriendLinkReq) (*SearchFriendLinkRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFriendLink", ctx, req)
	ret0, _ := ret[0].(*SearchFriendLinkRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFriendLink indicates an expected call of SearchFriendLink.
func (mr *MockTemplateApiServiceMockRecorder) SearchFriendLink(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFriendLink", reflect.TypeOf((*MockTemplateApiService)(nil).SearchFriendLink), ctx, req)
}

// MockTemplateApiClientProxy is a mock of TemplateApiClientProxy interface.
type MockTemplateApiClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateApiClientProxyMockRecorder
}

// MockTemplateApiClientProxyMockRecorder is the mock recorder for MockTemplateApiClientProxy.
type MockTemplateApiClientProxyMockRecorder struct {
	mock *MockTemplateApiClientProxy
}

// NewMockTemplateApiClientProxy creates a new mock instance.
func NewMockTemplateApiClientProxy(ctrl *gomock.Controller) *MockTemplateApiClientProxy {
	mock := &MockTemplateApiClientProxy{ctrl: ctrl}
	mock.recorder = &MockTemplateApiClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateApiClientProxy) EXPECT() *MockTemplateApiClientProxyMockRecorder {
	return m.recorder
}

// AddOrUpdateFriendLink mocks base method.
func (m *MockTemplateApiClientProxy) AddOrUpdateFriendLink(ctx context.Context, req *AddOrUpdateFriendLinkReq, opts ...client.Option) (*AddOrUpdateRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddOrUpdateFriendLink", varargs...)
	ret0, _ := ret[0].(*AddOrUpdateRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrUpdateFriendLink indicates an expected call of AddOrUpdateFriendLink.
func (mr *MockTemplateApiClientProxyMockRecorder) AddOrUpdateFriendLink(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateFriendLink", reflect.TypeOf((*MockTemplateApiClientProxy)(nil).AddOrUpdateFriendLink), varargs...)
}

// DeleteFriendLink mocks base method.
func (m *MockTemplateApiClientProxy) DeleteFriendLink(ctx context.Context, req *DeleteFriendLinkReq, opts ...client.Option) (*EmptyRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFriendLink", varargs...)
	ret0, _ := ret[0].(*EmptyRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFriendLink indicates an expected call of DeleteFriendLink.
func (mr *MockTemplateApiClientProxyMockRecorder) DeleteFriendLink(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriendLink", reflect.TypeOf((*MockTemplateApiClientProxy)(nil).DeleteFriendLink), varargs...)
}

// FriendLinkDetail mocks base method.
func (m *MockTemplateApiClientProxy) FriendLinkDetail(ctx context.Context, req *FriendLinkDetailReq, opts ...client.Option) (*FriendLink, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FriendLinkDetail", varargs...)
	ret0, _ := ret[0].(*FriendLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FriendLinkDetail indicates an expected call of FriendLinkDetail.
func (mr *MockTemplateApiClientProxyMockRecorder) FriendLinkDetail(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FriendLinkDetail", reflect.TypeOf((*MockTemplateApiClientProxy)(nil).FriendLinkDetail), varargs...)
}

// SearchFriendLink mocks base method.
func (m *MockTemplateApiClientProxy) SearchFriendLink(ctx context.Context, req *SearchFriendLinkReq, opts ...client.Option) (*SearchFriendLinkRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchFriendLink", varargs...)
	ret0, _ := ret[0].(*SearchFriendLinkRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFriendLink indicates an expected call of SearchFriendLink.
func (mr *MockTemplateApiClientProxyMockRecorder) SearchFriendLink(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFriendLink", reflect.TypeOf((*MockTemplateApiClientProxy)(nil).SearchFriendLink), varargs...)
}
